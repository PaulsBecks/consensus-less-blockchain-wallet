{"ast":null,"code":"\"use strict\";\n/**\n * pss.js\n */\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar params = __importStar(require(\"./params\")); // emLen = Math.ceil((modBits(=k) - 1)/8), e.g., Math.ceil(2047/8) = 256, that is exactly equal to k)\n\n/**\n * Check PSS Length.\n * @param {String} mode - 'sign' or 'verify'\n * @param {Number} k - Octet length of modulus length, i.e., n.\n * @param {String} hash - Name of hash function.\n * @param {Number} saltLength - Length of salt.\n * @throws {Error} - Throws if Inconsistent, EncodingError, or InvalidMode.\n */\n\n\nexports.checkLength = function (mode, _a) {\n  var k = _a.k,\n      hash = _a.hash,\n      saltLength = _a.saltLength;\n\n  if (mode === 'sign') {\n    if (k > (1 << params.hashes[hash].maxInput) - 1) throw new Error('Inconsistent');\n    if (k < params.hashes[hash].hashSize + saltLength + 2 || saltLength < 0) throw new Error('EncodingError');\n  } else if (mode === 'verify') {\n    if (k > (1 << params.hashes[hash].maxInput) - 1) throw new Error('Inconsistent');\n    if (k < params.hashes[hash].hashSize + saltLength + 2 || saltLength < 0) throw new Error('Inconsistent');\n  } else throw new Error('InvalidMode');\n};","map":{"version":3,"sources":["/home/paul/Dokumente/Code/ConsensusLessBlockChain/consensusless-blockchain-wallet/node_modules/js-crypto-rsa/dist/pss.js"],"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","params","require","checkLength","mode","_a","hash","saltLength","hashes","maxInput","Error","hashSize"],"mappings":"AAAA;AACA;;;;AAGA,IAAIA,YAAY,GAAI,QAAQ,KAAKA,YAAd,IAA+B,UAAUC,GAAV,EAAe;AAC7D,MAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B,OAAOD,GAAP;AAC3B,MAAIE,MAAM,GAAG,EAAb;AACA,MAAIF,GAAG,IAAI,IAAX,EAAiB,KAAK,IAAIG,CAAT,IAAcH,GAAd,EAAmB,IAAII,MAAM,CAACC,cAAP,CAAsBC,IAAtB,CAA2BN,GAA3B,EAAgCG,CAAhC,CAAJ,EAAwCD,MAAM,CAACC,CAAD,CAAN,GAAYH,GAAG,CAACG,CAAD,CAAf;AAC5ED,EAAAA,MAAM,CAAC,SAAD,CAAN,GAAoBF,GAApB;AACA,SAAOE,MAAP;AACH,CAND;;AAOAE,MAAM,CAACG,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGX,YAAY,CAACY,OAAO,CAAC,UAAD,CAAR,CAAzB,C,CACA;;AACA;;;;;;;;;;AAQAH,OAAO,CAACI,WAAR,GAAsB,UAAUC,IAAV,EAAgBC,EAAhB,EAAoB;AACtC,MAAIX,CAAC,GAAGW,EAAE,CAACX,CAAX;AAAA,MAAcY,IAAI,GAAGD,EAAE,CAACC,IAAxB;AAAA,MAA8BC,UAAU,GAAGF,EAAE,CAACE,UAA9C;;AACA,MAAIH,IAAI,KAAK,MAAb,EAAqB;AACjB,QAAIV,CAAC,GAAG,CAAC,KAAKO,MAAM,CAACO,MAAP,CAAcF,IAAd,EAAoBG,QAA1B,IAAsC,CAA9C,EACI,MAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACJ,QAAIhB,CAAC,GAAGO,MAAM,CAACO,MAAP,CAAcF,IAAd,EAAoBK,QAApB,GAA+BJ,UAA/B,GAA4C,CAAhD,IAAqDA,UAAU,GAAG,CAAtE,EACI,MAAM,IAAIG,KAAJ,CAAU,eAAV,CAAN;AACP,GALD,MAMK,IAAIN,IAAI,KAAK,QAAb,EAAuB;AACxB,QAAIV,CAAC,GAAG,CAAC,KAAKO,MAAM,CAACO,MAAP,CAAcF,IAAd,EAAoBG,QAA1B,IAAsC,CAA9C,EACI,MAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACJ,QAAIhB,CAAC,GAAGO,MAAM,CAACO,MAAP,CAAcF,IAAd,EAAoBK,QAApB,GAA+BJ,UAA/B,GAA4C,CAAhD,IAAqDA,UAAU,GAAG,CAAtE,EACI,MAAM,IAAIG,KAAJ,CAAU,cAAV,CAAN;AACP,GALI,MAOD,MAAM,IAAIA,KAAJ,CAAU,aAAV,CAAN;AACP,CAhBD","sourcesContent":["\"use strict\";\n/**\n * pss.js\n */\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar params = __importStar(require(\"./params\"));\n// emLen = Math.ceil((modBits(=k) - 1)/8), e.g., Math.ceil(2047/8) = 256, that is exactly equal to k)\n/**\n * Check PSS Length.\n * @param {String} mode - 'sign' or 'verify'\n * @param {Number} k - Octet length of modulus length, i.e., n.\n * @param {String} hash - Name of hash function.\n * @param {Number} saltLength - Length of salt.\n * @throws {Error} - Throws if Inconsistent, EncodingError, or InvalidMode.\n */\nexports.checkLength = function (mode, _a) {\n    var k = _a.k, hash = _a.hash, saltLength = _a.saltLength;\n    if (mode === 'sign') {\n        if (k > (1 << params.hashes[hash].maxInput) - 1)\n            throw new Error('Inconsistent');\n        if (k < params.hashes[hash].hashSize + saltLength + 2 || saltLength < 0)\n            throw new Error('EncodingError');\n    }\n    else if (mode === 'verify') {\n        if (k > (1 << params.hashes[hash].maxInput) - 1)\n            throw new Error('Inconsistent');\n        if (k < params.hashes[hash].hashSize + saltLength + 2 || saltLength < 0)\n            throw new Error('Inconsistent');\n    }\n    else\n        throw new Error('InvalidMode');\n};\n//# sourceMappingURL=pss.js.map"]},"metadata":{},"sourceType":"script"}