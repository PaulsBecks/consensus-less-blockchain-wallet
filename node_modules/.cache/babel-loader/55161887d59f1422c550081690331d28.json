{"ast":null,"code":"\"use strict\";\n/**\n * random.js\n */\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util = __importStar(require(\"js-crypto-env\"));\n/**\n * Secure random string generator based on getRandomBytes,\n * which is composed of uppercase or lowercase alphanumeric characters;\n * @param {Number} len - Length of string.\n * @return {String} - Generated random ASCII string.\n */\n\n\nexports.getRandomString = function (len) {\n  var array = exports.getRandomBytes(len);\n  var types = exports.getRandomBytes(len); // indicating alphanumeric, upper, lower\n\n  var finalString = ''; // Ascii code\n  // 1-0: 0x30 -- 0x39, 10 chars\n  // A-Z: 0x41 -- 0x5a,\n  // a-z: 0x61 -- 0x7a\n\n  for (var i = 0; i < len; i++) {\n    types[i] = types[i] % 3;\n    array[i] = types[i] === 0 ? array[i] % 10 + 0x30 : array[i] % 26 + (types[i] === 1 ? 0x41 : 0x61);\n    finalString += String.fromCharCode(array[i]);\n  }\n\n  return finalString;\n};\n/**\n * Secure random 'ASCII' string generator based on getRandomBytes;\n * @param {Number} len - Length of ASCII string.\n * @return {String} - Generated random ASCII string.\n */\n\n\nexports.getRandomAsciiString = function (len) {\n  var array = exports.getRandomBytes(len);\n  var finalString = ''; // Ascii code excluding control characters are in 0x20 -- 0x7e\n\n  for (var i = 0; i < len; i++) {\n    array[i] = array[i] % 0x5e + 0x20;\n    finalString += String.fromCharCode(array[i]);\n  }\n\n  return finalString;\n};\n/**\n * Secure random string generator based on getRandomBytes,\n * which is composed of givin character candidates;\n * @param {Number} len - Length of string.\n * @param {String} candidates - Candidates string to sample randomly.\n * @return {String} - Generated random string.\n */\n\n\nexports.getRandomSampledString = function (len, candidates) {\n  var candidateLen = candidates.length;\n  if (candidateLen === 0) return '';\n  var array = exports.getRandomBytes(len);\n  var finalString = '';\n\n  for (var i = 0; i < len; i++) {\n    finalString += candidates[array[i] % candidateLen];\n  }\n\n  return finalString;\n};\n/**\n * Secure random generator that returns a byte array filled with cryptographically secure random bytes\n * @param {Number} len - Byte length of random sequence.\n * @return {Uint8Array} - Generated random sequence.\n * @throws {Error} - Throws if UnsupportedEnvironment.\n */\n\n\nexports.getRandomBytes = function (len) {\n  var webCrypto = util.getRootWebCryptoAll(); // web crypto api or ms crypto\n\n  var nodeCrypto = util.getNodeCrypto(); // implementation on node.js\n\n  if (typeof webCrypto !== 'undefined' && typeof webCrypto.getRandomValues === 'function') {\n    var array = new Uint8Array(len);\n    webCrypto.getRandomValues(array); // for modern browsers or legacy ie 11\n\n    return array;\n  } else if (typeof nodeCrypto !== 'undefined') {\n    // for node\n    return new Uint8Array(nodeCrypto.randomBytes(len));\n  } else {\n    throw new Error('UnsupportedEnvironment');\n  }\n};","map":{"version":3,"sources":["/home/paul/Dokumente/Code/ConsensusLessBlockChain/consensusless-blockchain-wallet/node_modules/js-crypto-random/dist/random.js"],"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","util","require","getRandomString","len","array","getRandomBytes","types","finalString","i","String","fromCharCode","getRandomAsciiString","getRandomSampledString","candidates","candidateLen","length","webCrypto","getRootWebCryptoAll","nodeCrypto","getNodeCrypto","getRandomValues","Uint8Array","randomBytes","Error"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * random.js\n */\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = __importStar(require(\"js-crypto-env\"));\n/**\n * Secure random string generator based on getRandomBytes,\n * which is composed of uppercase or lowercase alphanumeric characters;\n * @param {Number} len - Length of string.\n * @return {String} - Generated random ASCII string.\n */\nexports.getRandomString = function (len) {\n    var array = exports.getRandomBytes(len);\n    var types = exports.getRandomBytes(len); // indicating alphanumeric, upper, lower\n    var finalString = '';\n    // Ascii code\n    // 1-0: 0x30 -- 0x39, 10 chars\n    // A-Z: 0x41 -- 0x5a,\n    // a-z: 0x61 -- 0x7a\n    for (var i = 0; i < len; i++) {\n        types[i] = (types[i] % 3);\n        array[i] = (types[i] === 0) ?\n            (array[i] % 10) + 0x30 :\n            (array[i] % 26) + ((types[i] === 1) ? 0x41 : 0x61);\n        finalString += String.fromCharCode(array[i]);\n    }\n    return finalString;\n};\n/**\n * Secure random 'ASCII' string generator based on getRandomBytes;\n * @param {Number} len - Length of ASCII string.\n * @return {String} - Generated random ASCII string.\n */\nexports.getRandomAsciiString = function (len) {\n    var array = exports.getRandomBytes(len);\n    var finalString = '';\n    // Ascii code excluding control characters are in 0x20 -- 0x7e\n    for (var i = 0; i < len; i++) {\n        array[i] = (array[i] % 0x5e) + 0x20;\n        finalString += String.fromCharCode(array[i]);\n    }\n    return finalString;\n};\n/**\n * Secure random string generator based on getRandomBytes,\n * which is composed of givin character candidates;\n * @param {Number} len - Length of string.\n * @param {String} candidates - Candidates string to sample randomly.\n * @return {String} - Generated random string.\n */\nexports.getRandomSampledString = function (len, candidates) {\n    var candidateLen = candidates.length;\n    if (candidateLen === 0)\n        return '';\n    var array = exports.getRandomBytes(len);\n    var finalString = '';\n    for (var i = 0; i < len; i++) {\n        finalString += candidates[array[i] % candidateLen];\n    }\n    return finalString;\n};\n/**\n * Secure random generator that returns a byte array filled with cryptographically secure random bytes\n * @param {Number} len - Byte length of random sequence.\n * @return {Uint8Array} - Generated random sequence.\n * @throws {Error} - Throws if UnsupportedEnvironment.\n */\nexports.getRandomBytes = function (len) {\n    var webCrypto = util.getRootWebCryptoAll(); // web crypto api or ms crypto\n    var nodeCrypto = util.getNodeCrypto(); // implementation on node.js\n    if (typeof webCrypto !== 'undefined' && typeof webCrypto.getRandomValues === 'function') {\n        var array = new Uint8Array(len);\n        webCrypto.getRandomValues(array); // for modern browsers or legacy ie 11\n        return array;\n    }\n    else if (typeof nodeCrypto !== 'undefined') { // for node\n        return new Uint8Array(nodeCrypto.randomBytes(len));\n    }\n    else {\n        throw new Error('UnsupportedEnvironment');\n    }\n};\n//# sourceMappingURL=random.js.map"]},"metadata":{},"sourceType":"script"}