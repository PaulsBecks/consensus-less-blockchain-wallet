{"ast":null,"code":"\"use strict\";\n/**\n * util.js\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar js_encoding_utils_1 = __importDefault(require(\"js-encoding-utils\"));\n\nvar params = __importStar(require(\"./params\"));\n\nvar asn1def_1 = require(\"./asn1def\");\n/**\n * Check if the given key is encrypted.\n * @param {DER|PEM} key - Private key object in ASN.1 encoding.\n * @param {AsnFormat} [format='pem'] - pem or der\n * @return {boolean} - True if encrypted.\n */\n\n\nexports.isAsn1Encrypted = function (key, format) {\n  if (format === void 0) {\n    format = 'pem';\n  }\n\n  var keyType;\n\n  try {\n    keyType = exports.getAsn1KeyType(key, format);\n  } catch (e) {\n    return false;\n  }\n\n  return keyType === 'encryptedPrivate';\n};\n/**\n * Check if the given key is public.\n * @param {DER|PEM} key - Public key object in ASN.1 encoding.\n * @param {AsnFormat} format - pem or der\n * @return {boolean} - True if public.\n */\n\n\nexports.isAsn1Public = function (key, format) {\n  if (format === void 0) {\n    format = 'pem';\n  }\n\n  var keyType;\n\n  try {\n    keyType = exports.getAsn1KeyType(key, format);\n  } catch (e) {\n    return false;\n  }\n\n  return keyType === 'public';\n};\n/**\n * Retrieve the key type of public or private in ASN.1 format\n * @param {DER|PEM} key - Key object in ASN.1 encoding.\n * @param {AsnFormat} format - pem or der\n * @return {'public'|'private'|'encryptedPrivate'} - The key type of the given key.\n * @throws {Error} - Throws if NotSpkiNorPkcs8Key.\n */\n\n\nexports.getAsn1KeyType = function (key, format) {\n  if (format === void 0) {\n    format = 'pem';\n  } // Peel the pem strings\n\n\n  var binKey = format === 'pem' ? js_encoding_utils_1.default.formatter.pemToBin(key) : key;\n  var decoded = asn1def_1.KeyStructure.decode(Buffer.from(binKey), 'der');\n  if (decoded.type === 'encryptedPrivateKeyInfo') return 'encryptedPrivate';else if (decoded.type === 'oneAsymmetricKey') return 'private';else if (decoded.type === 'subjectPublicKeyInfo') return 'public';else throw new Error('NotSpkiNorPkcs8Key');\n};\n/**\n * Retrieve the type of SEC1 octet key.\n * @param {OctetEC} sec1key - Key object in OctetEC encoding of Uint8Array.\n * @param {CurveTypes} namedCurve - Name of elliptic curve like 'P-256'.\n * @return {PublicOrPrivate} - public or private\n * @throws {Error} - Throws if UnsupportedKeyStructure.\n */\n\n\nexports.getSec1KeyType = function (sec1key, namedCurve) {\n  var len = params.namedCurves[namedCurve].payloadSize;\n  var binKey = sec1key instanceof Uint8Array ? sec1key : js_encoding_utils_1.default.encoder.hexStringToArrayBuffer(sec1key); // original key type\n\n  if (binKey.length <= len) return 'private';else if (binKey.length === 2 * len + 1 && binKey[0] === 0x04 || binKey.length === len + 1 && (binKey[0] === 0x02 || binKey[0] === 0x03)) return 'public';else throw new Error('UnsupportedKeyStructure');\n};\n/**\n * Check key type of JWK.\n * @param {JsonWebKey} jwkey - Key object in JWK format.\n * @return {PublicOrPrivate} - public or private\n * @throws {Error} - Throws if InvalidECKey, InvalidRSAKey or UnsupportedJWKType.\n */\n\n\nexports.getJwkType = function (jwkey) {\n  if (jwkey.kty === 'EC') {\n    if (jwkey.x && jwkey.y && jwkey.d) return 'private';else if (jwkey.x && jwkey.y) return 'public';else throw new Error('InvalidECKey');\n  } else if (jwkey.kty === 'RSA') {\n    if (jwkey.n && jwkey.e && jwkey.d && jwkey.p && jwkey.q && jwkey.dp && jwkey.dq && jwkey.qi) return 'private';else if (jwkey.n && jwkey.e) return 'public';else throw new Error('InvalidRSAKey');\n  } else throw new Error('UnsupportedJWKType');\n};\n/**\n * Prune leading zeros of an octet sequence in Uint8Array for jwk formatting of RSA.\n * https://tools.ietf.org/html/rfc7518#section-6.3\n * @param {Uint8Array} array - The octet sequence.\n * @return {Uint8Array} - An octet sequence pruned leading zeros of length equal to or shorter than the input array.\n * @throws {Error} - Throws if NonUint8Array.\n */\n\n\nexports.pruneLeadingZeros = function (array) {\n  var offset = 0;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i] !== 0x00) break;\n    offset++;\n  }\n\n  var returnArray = new Uint8Array(array.length - offset);\n  returnArray.set(array.slice(offset, array.length));\n  return returnArray;\n}; // for pem/oct/der formatting from jwk of RSA\n\n/**\n * Append leading zeros and generate an octet sequence of fixed length.\n * @param {Uint8Array} array - An octet sequence.\n * @param {Number} len - Intended length of output sequence.\n * @returns {Uint8Array} - An octet sequence with leading zeros.\n * @throws {Error} - Throws if NonUint8Array or InvalidLength.\n */\n\n\nexports.appendLeadingZeros = function (array, len) {\n  if (array.length > len) throw new Error('InvalidLength');\n  var returnArray = new Uint8Array(len); // initialized with zeros\n\n  returnArray.set(array, len - array.length);\n  return returnArray;\n};","map":{"version":3,"sources":["/home/paul/Dokumente/Code/ConsensusLessBlockChain/consensusless-blockchain-wallet/node_modules/js-crypto-key-utils/dist/util.js"],"names":["__importDefault","mod","__esModule","__importStar","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","js_encoding_utils_1","require","params","asn1def_1","isAsn1Encrypted","key","format","keyType","getAsn1KeyType","e","isAsn1Public","binKey","default","formatter","pemToBin","decoded","KeyStructure","decode","Buffer","from","type","Error","getSec1KeyType","sec1key","namedCurve","len","namedCurves","payloadSize","Uint8Array","encoder","hexStringToArrayBuffer","length","getJwkType","jwkey","kty","x","y","d","n","p","q","dp","dq","qi","pruneLeadingZeros","array","offset","i","returnArray","set","slice","appendLeadingZeros"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * util.js\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar js_encoding_utils_1 = __importDefault(require(\"js-encoding-utils\"));\nvar params = __importStar(require(\"./params\"));\nvar asn1def_1 = require(\"./asn1def\");\n/**\n * Check if the given key is encrypted.\n * @param {DER|PEM} key - Private key object in ASN.1 encoding.\n * @param {AsnFormat} [format='pem'] - pem or der\n * @return {boolean} - True if encrypted.\n */\nexports.isAsn1Encrypted = function (key, format) {\n    if (format === void 0) { format = 'pem'; }\n    var keyType;\n    try {\n        keyType = exports.getAsn1KeyType(key, format);\n    }\n    catch (e) {\n        return false;\n    }\n    return keyType === 'encryptedPrivate';\n};\n/**\n * Check if the given key is public.\n * @param {DER|PEM} key - Public key object in ASN.1 encoding.\n * @param {AsnFormat} format - pem or der\n * @return {boolean} - True if public.\n */\nexports.isAsn1Public = function (key, format) {\n    if (format === void 0) { format = 'pem'; }\n    var keyType;\n    try {\n        keyType = exports.getAsn1KeyType(key, format);\n    }\n    catch (e) {\n        return false;\n    }\n    return (keyType === 'public');\n};\n/**\n * Retrieve the key type of public or private in ASN.1 format\n * @param {DER|PEM} key - Key object in ASN.1 encoding.\n * @param {AsnFormat} format - pem or der\n * @return {'public'|'private'|'encryptedPrivate'} - The key type of the given key.\n * @throws {Error} - Throws if NotSpkiNorPkcs8Key.\n */\nexports.getAsn1KeyType = function (key, format) {\n    if (format === void 0) { format = 'pem'; }\n    // Peel the pem strings\n    var binKey = (format === 'pem') ? js_encoding_utils_1.default.formatter.pemToBin(key) : key;\n    var decoded = asn1def_1.KeyStructure.decode(Buffer.from(binKey), 'der');\n    if (decoded.type === 'encryptedPrivateKeyInfo')\n        return 'encryptedPrivate';\n    else if (decoded.type === 'oneAsymmetricKey')\n        return 'private';\n    else if (decoded.type === 'subjectPublicKeyInfo')\n        return 'public';\n    else\n        throw new Error('NotSpkiNorPkcs8Key');\n};\n/**\n * Retrieve the type of SEC1 octet key.\n * @param {OctetEC} sec1key - Key object in OctetEC encoding of Uint8Array.\n * @param {CurveTypes} namedCurve - Name of elliptic curve like 'P-256'.\n * @return {PublicOrPrivate} - public or private\n * @throws {Error} - Throws if UnsupportedKeyStructure.\n */\nexports.getSec1KeyType = function (sec1key, namedCurve) {\n    var len = params.namedCurves[namedCurve].payloadSize;\n    var binKey = (sec1key instanceof Uint8Array) ? sec1key : js_encoding_utils_1.default.encoder.hexStringToArrayBuffer(sec1key);\n    // original key type\n    if (binKey.length <= len)\n        return 'private';\n    else if ((binKey.length === 2 * len + 1 && binKey[0] === 0x04)\n        || (binKey.length === len + 1 && (binKey[0] === 0x02 || binKey[0] === 0x03)))\n        return 'public';\n    else\n        throw new Error('UnsupportedKeyStructure');\n};\n/**\n * Check key type of JWK.\n * @param {JsonWebKey} jwkey - Key object in JWK format.\n * @return {PublicOrPrivate} - public or private\n * @throws {Error} - Throws if InvalidECKey, InvalidRSAKey or UnsupportedJWKType.\n */\nexports.getJwkType = function (jwkey) {\n    if (jwkey.kty === 'EC') {\n        if (jwkey.x && jwkey.y && jwkey.d)\n            return 'private';\n        else if (jwkey.x && jwkey.y)\n            return 'public';\n        else\n            throw new Error('InvalidECKey');\n    }\n    else if (jwkey.kty === 'RSA') {\n        if (jwkey.n && jwkey.e && jwkey.d && jwkey.p && jwkey.q && jwkey.dp && jwkey.dq && jwkey.qi)\n            return 'private';\n        else if (jwkey.n && jwkey.e)\n            return 'public';\n        else\n            throw new Error('InvalidRSAKey');\n    }\n    else\n        throw new Error('UnsupportedJWKType');\n};\n/**\n * Prune leading zeros of an octet sequence in Uint8Array for jwk formatting of RSA.\n * https://tools.ietf.org/html/rfc7518#section-6.3\n * @param {Uint8Array} array - The octet sequence.\n * @return {Uint8Array} - An octet sequence pruned leading zeros of length equal to or shorter than the input array.\n * @throws {Error} - Throws if NonUint8Array.\n */\nexports.pruneLeadingZeros = function (array) {\n    var offset = 0;\n    for (var i = 0; i < array.length; i++) {\n        if (array[i] !== 0x00)\n            break;\n        offset++;\n    }\n    var returnArray = new Uint8Array(array.length - offset);\n    returnArray.set(array.slice(offset, array.length));\n    return returnArray;\n};\n// for pem/oct/der formatting from jwk of RSA\n/**\n * Append leading zeros and generate an octet sequence of fixed length.\n * @param {Uint8Array} array - An octet sequence.\n * @param {Number} len - Intended length of output sequence.\n * @returns {Uint8Array} - An octet sequence with leading zeros.\n * @throws {Error} - Throws if NonUint8Array or InvalidLength.\n */\nexports.appendLeadingZeros = function (array, len) {\n    if (array.length > len)\n        throw new Error('InvalidLength');\n    var returnArray = new Uint8Array(len); // initialized with zeros\n    returnArray.set(array, len - array.length);\n    return returnArray;\n};\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"script"}