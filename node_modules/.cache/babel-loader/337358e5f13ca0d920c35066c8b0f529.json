{"ast":null,"code":"import cryptico from \"cryptico\";\nimport { transactions as mock_transaction } from \"../../mock\";\nimport rsa from \"js-crypto-rsa\";\nimport keyutils from \"js-crypto-key-utils\";\nexport default async function createWallet() {\n  var passPhrase = \"The Moon is a Harsh Mistress.\";\n  var Bits = 2048; // var rsa_key = cryptico.generateRSAKey(passPhrase, Bits);\n\n  const key = await rsa.generateKey(2048);\n  const pem = await kye.export(\"pem\", {\n    outputPublic: true,\n    compact: true\n  });\n  console.log(pem);\n  console.log(key.publicKey, key.privateKey);\n  return {\n    publicKey: key.publicKey,\n    transactions: mock_transaction,\n    privateKey: key.privateKey\n  };\n}","map":{"version":3,"sources":["/home/paul/Dokumente/Code/ConsensusLessBlockChain/consensusless-blockchain-wallet/src/services/wallet/createWallet.js"],"names":["cryptico","transactions","mock_transaction","rsa","keyutils","createWallet","passPhrase","Bits","key","generateKey","pem","kye","export","outputPublic","compact","console","log","publicKey","privateKey"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,SAASC,YAAY,IAAIC,gBAAzB,QAAiD,YAAjD;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,eAAe,eAAeC,YAAf,GAA8B;AAC3C,MAAIC,UAAU,GAAG,+BAAjB;AACA,MAAIC,IAAI,GAAG,IAAX,CAF2C,CAG3C;;AACA,QAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,WAAJ,CAAgB,IAAhB,CAAlB;AACA,QAAMC,GAAG,GAAG,MAAMC,GAAG,CAACC,MAAJ,CAAW,KAAX,EAAkB;AAAEC,IAAAA,YAAY,EAAE,IAAhB;AAAsBC,IAAAA,OAAO,EAAE;AAA/B,GAAlB,CAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACS,SAAhB,EAA2BT,GAAG,CAACU,UAA/B;AACA,SAAO;AACLD,IAAAA,SAAS,EAAET,GAAG,CAACS,SADV;AAELhB,IAAAA,YAAY,EAAEC,gBAFT;AAGLgB,IAAAA,UAAU,EAAEV,GAAG,CAACU;AAHX,GAAP;AAKD","sourcesContent":["import cryptico from \"cryptico\";\nimport { transactions as mock_transaction } from \"../../mock\";\nimport rsa from \"js-crypto-rsa\";\nimport keyutils from \"js-crypto-key-utils\";\n\nexport default async function createWallet() {\n  var passPhrase = \"The Moon is a Harsh Mistress.\";\n  var Bits = 2048;\n  // var rsa_key = cryptico.generateRSAKey(passPhrase, Bits);\n  const key = await rsa.generateKey(2048);\n  const pem = await kye.export(\"pem\", { outputPublic: true, compact: true });\n  console.log(pem);\n  console.log(key.publicKey, key.privateKey);\n  return {\n    publicKey: key.publicKey,\n    transactions: mock_transaction,\n    privateKey: key.privateKey\n  };\n}\n"]},"metadata":{},"sourceType":"module"}