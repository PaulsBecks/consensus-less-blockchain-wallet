{"ast":null,"code":"export function ab2str(buf) {\n  return String.fromCharCode.apply(null, new Uint16Array(buf));\n}\nexport function str2ab(str) {\n  var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n\n  var bufView = new Uint16Array(buf);\n\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n\n  return buf;\n}\nexport function buf2hex(buffer) {\n  // buffer is an ArrayBuffer\n  return Array.prototype.map.call(new Uint8Array(buffer), x => (\"00\" + x.toString(16)).slice(-2)).join(\"\");\n}","map":{"version":3,"sources":["/home/paul/Dokumente/Code/ConsensusLessBlockChain/consensusless-blockchain-wallet/src/services/strAb.js"],"names":["ab2str","buf","String","fromCharCode","apply","Uint16Array","str2ab","str","ArrayBuffer","length","bufView","i","strLen","charCodeAt","buf2hex","buffer","Array","prototype","map","call","Uint8Array","x","toString","slice","join"],"mappings":"AAAA,OAAO,SAASA,MAAT,CAAgBC,GAAhB,EAAqB;AAC1B,SAAOC,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgC,IAAIC,WAAJ,CAAgBJ,GAAhB,CAAhC,CAAP;AACD;AAED,OAAO,SAASK,MAAT,CAAgBC,GAAhB,EAAqB;AAC1B,MAAIN,GAAG,GAAG,IAAIO,WAAJ,CAAgBD,GAAG,CAACE,MAAJ,GAAa,CAA7B,CAAV,CAD0B,CACiB;;AAC3C,MAAIC,OAAO,GAAG,IAAIL,WAAJ,CAAgBJ,GAAhB,CAAd;;AACA,OAAK,IAAIU,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGL,GAAG,CAACE,MAA7B,EAAqCE,CAAC,GAAGC,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AACpDD,IAAAA,OAAO,CAACC,CAAD,CAAP,GAAaJ,GAAG,CAACM,UAAJ,CAAeF,CAAf,CAAb;AACD;;AACD,SAAOV,GAAP;AACD;AAED,OAAO,SAASa,OAAT,CAAiBC,MAAjB,EAAyB;AAC9B;AACA,SAAOC,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CACJC,IADI,CACC,IAAIC,UAAJ,CAAeL,MAAf,CADD,EACyBM,CAAC,IAAI,CAAC,OAAOA,CAAC,CAACC,QAAF,CAAW,EAAX,CAAR,EAAwBC,KAAxB,CAA8B,CAAC,CAA/B,CAD9B,EAEJC,IAFI,CAEC,EAFD,CAAP;AAGD","sourcesContent":["export function ab2str(buf) {\n  return String.fromCharCode.apply(null, new Uint16Array(buf));\n}\n\nexport function str2ab(str) {\n  var buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  var bufView = new Uint16Array(buf);\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n\nexport function buf2hex(buffer) {\n  // buffer is an ArrayBuffer\n  return Array.prototype.map\n    .call(new Uint8Array(buffer), x => (\"00\" + x.toString(16)).slice(-2))\n    .join(\"\");\n}\n"]},"metadata":{},"sourceType":"module"}