{"ast":null,"code":"import cryptico from \"cryptico\";\nimport { transactions as mock_transaction } from \"../../mock\";\nimport rsa from \"js-crypto-rsa\";\nimport keyutils from \"js-crypto-key-utils\";\nexport default async function createWallet() {\n  var passPhrase = \"The Moon is a Harsh Mistress.\";\n  var Bits = 2048;\n  const key = await rsa.generateKey(2048);\n  let pem_pub_key = await new keyutils.Key(\"jwk\", key.publicKey).export(\"pem\");\n  pem_pub_key = pem_pub_key.split(\"-----\")[2].slice(1, -1);\n  return {\n    publicKey: key.publicKey,\n    transactions: mock_transaction,\n    privateKey: key.privateKey,\n    pem_pub_key\n  };\n}","map":{"version":3,"sources":["/home/paul/Dokumente/Code/ConsensusLessBlockChain/consensusless-blockchain-wallet/src/services/wallet/createWallet.js"],"names":["cryptico","transactions","mock_transaction","rsa","keyutils","createWallet","passPhrase","Bits","key","generateKey","pem_pub_key","Key","publicKey","export","split","slice","privateKey"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,SAASC,YAAY,IAAIC,gBAAzB,QAAiD,YAAjD;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,eAAe,eAAeC,YAAf,GAA8B;AAC3C,MAAIC,UAAU,GAAG,+BAAjB;AACA,MAAIC,IAAI,GAAG,IAAX;AACA,QAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,WAAJ,CAAgB,IAAhB,CAAlB;AACA,MAAIC,WAAW,GAAG,MAAM,IAAIN,QAAQ,CAACO,GAAb,CAAiB,KAAjB,EAAwBH,GAAG,CAACI,SAA5B,EAAuCC,MAAvC,CAA8C,KAA9C,CAAxB;AACAH,EAAAA,WAAW,GAAGA,WAAW,CAACI,KAAZ,CAAkB,OAAlB,EAA2B,CAA3B,EAA8BC,KAA9B,CAAoC,CAApC,EAAuC,CAAC,CAAxC,CAAd;AAEA,SAAO;AACLH,IAAAA,SAAS,EAAEJ,GAAG,CAACI,SADV;AAELX,IAAAA,YAAY,EAAEC,gBAFT;AAGLc,IAAAA,UAAU,EAAER,GAAG,CAACQ,UAHX;AAILN,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import cryptico from \"cryptico\";\nimport { transactions as mock_transaction } from \"../../mock\";\nimport rsa from \"js-crypto-rsa\";\nimport keyutils from \"js-crypto-key-utils\";\n\nexport default async function createWallet() {\n  var passPhrase = \"The Moon is a Harsh Mistress.\";\n  var Bits = 2048;\n  const key = await rsa.generateKey(2048);\n  let pem_pub_key = await new keyutils.Key(\"jwk\", key.publicKey).export(\"pem\");\n  pem_pub_key = pem_pub_key.split(\"-----\")[2].slice(1, -1);\n\n  return {\n    publicKey: key.publicKey,\n    transactions: mock_transaction,\n    privateKey: key.privateKey,\n    pem_pub_key\n  };\n}\n"]},"metadata":{},"sourceType":"module"}