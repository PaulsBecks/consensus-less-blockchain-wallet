{"ast":null,"code":"\"use strict\";\n/**\n * octenc.js\n */\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar params = __importStar(require(\"./params\"));\n\nvar js_encoding_utils_1 = __importDefault(require(\"js-encoding-utils\"));\n\nvar elliptic_1 = __importDefault(require(\"elliptic\"));\n\nvar util_1 = require(\"./util\");\n\nvar Ec = elliptic_1.default.ec;\n/**\n * Convert JWK EC public/private keys to octet form.\n * Compressed form of EC public key is referred to RFC 5480 {@link https://tools.ietf.org/html/rfc5480}.\n * @param {JsonWebKey} jwkey - A key object in JWK format to be encoded to SEC1 octet format key.\n * @param {boolean} [outputPublic] - Export public key even from private key if true.\n * @param {OctetFormat} [outputFormat='binary'] - 'binary' or 'string'.\n * @param {boolean} [compact=false] - Export compressed form of public key if true.\n * @return {Uint8Array|string} - Encoded key object in JWK format.\n */\n\nexports.fromJwk = function (jwkey, _a) {\n  var outputPublic = _a.outputPublic,\n      _b = _a.outputFormat,\n      outputFormat = _b === void 0 ? 'binary' : _b,\n      _c = _a.compact,\n      compact = _c === void 0 ? false : _c; // original key type\n\n  var orgType = util_1.getJwkType(jwkey);\n  var type = typeof outputPublic === 'boolean' && outputPublic ? 'public' : orgType;\n\n  if (type === 'public') {\n    var bufX = js_encoding_utils_1.default.encoder.decodeBase64Url(jwkey.x);\n    var bufY = js_encoding_utils_1.default.encoder.decodeBase64Url(jwkey.y);\n    var publicKey = void 0;\n\n    if (compact) {\n      // compressed form\n      // http://www.secg.org/SEC1-Ver-1.0.pdf\n      publicKey = new Uint8Array(bufX.length + 1);\n      publicKey[0] = 0xFF & (0x01 & bufY.slice(-1)[0]) + 0x02;\n      publicKey.set(bufX, 1);\n    } else {\n      // uncompressed form\n      publicKey = new Uint8Array(bufX.length + bufY.length + 1);\n      publicKey[0] = 0xFF & 0x04;\n      publicKey.set(bufX, 1);\n      publicKey.set(bufY, bufX.length + 1);\n    }\n\n    return outputFormat === 'string' ? js_encoding_utils_1.default.encoder.arrayBufferToHexString(publicKey) : publicKey;\n  } else {\n    //type === 'private'\n    if (!jwkey.d) throw new Error('InvalidKey');\n    var bufD = js_encoding_utils_1.default.encoder.decodeBase64Url(jwkey.d);\n    return outputFormat === 'string' ? js_encoding_utils_1.default.encoder.arrayBufferToHexString(bufD) : bufD;\n  }\n};\n/**\n * Convert Octet form of EC public/private keys to JWK.\n * @param {OctetEC} octkey - OctetEC key object in hex string format or Uint8Array.\n * @param {String} namedCurve - Name of elliptic curve like 'P-256'.\n * @param {boolean} [outputPublic] - Export public key even from private key if true.\n * @return {JsonWebKey} - Derived key object in JWK format.\n */\n\n\nexports.toJwk = function (octkey, namedCurve, _a) {\n  var outputPublic = _a.outputPublic;\n  if (Object.keys(params.namedCurves).indexOf(namedCurve) < 0) throw new Error('UnsupportedCurve'); // original key type and check the key structure\n\n  var orgType = util_1.getSec1KeyType(octkey, namedCurve);\n  var type = typeof outputPublic === 'boolean' && outputPublic ? 'public' : orgType; // format conversion\n\n  var binKey = typeof octkey === 'string' ? js_encoding_utils_1.default.encoder.hexStringToArrayBuffer(octkey) : octkey; // instantiation\n\n  var curve = params.namedCurves[namedCurve].indutnyName;\n  var ec = new Ec(curve); // derive key object from binary key\n\n  var ecKey = orgType === 'public' ? ec.keyFromPublic(binKey) : ec.keyFromPrivate(binKey);\n  var publicKey = new Uint8Array(ecKey.getPublic('array'));\n  var len = params.namedCurves[namedCurve].payloadSize;\n  var bufX = publicKey.slice(1, len + 1);\n  var bufY = publicKey.slice(len + 1, len * 2 + 1);\n  var jwKey = {\n    kty: 'EC',\n    crv: namedCurve,\n    x: js_encoding_utils_1.default.encoder.encodeBase64Url(bufX),\n    y: js_encoding_utils_1.default.encoder.encodeBase64Url(bufY) // ext: true\n\n  };\n\n  if (type === 'private') {\n    // octkey is exactly private key if type is private.\n    jwKey.d = js_encoding_utils_1.default.encoder.encodeBase64Url(binKey);\n  }\n\n  return jwKey;\n};","map":{"version":3,"sources":["/home/paul/Dokumente/Code/ConsensusLessBlockChain/consensusless-blockchain-wallet/node_modules/js-crypto-key-utils/dist/octenc.js"],"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","__importDefault","defineProperty","exports","value","params","require","js_encoding_utils_1","elliptic_1","util_1","Ec","default","ec","fromJwk","jwkey","_a","outputPublic","_b","outputFormat","_c","compact","orgType","getJwkType","type","bufX","encoder","decodeBase64Url","x","bufY","y","publicKey","Uint8Array","length","slice","set","arrayBufferToHexString","d","Error","bufD","toJwk","octkey","namedCurve","keys","namedCurves","indexOf","getSec1KeyType","binKey","hexStringToArrayBuffer","curve","indutnyName","ecKey","keyFromPublic","keyFromPrivate","getPublic","len","payloadSize","jwKey","kty","crv","encodeBase64Url"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * octenc.js\n */\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar params = __importStar(require(\"./params\"));\nvar js_encoding_utils_1 = __importDefault(require(\"js-encoding-utils\"));\nvar elliptic_1 = __importDefault(require(\"elliptic\"));\nvar util_1 = require(\"./util\");\nvar Ec = elliptic_1.default.ec;\n/**\n * Convert JWK EC public/private keys to octet form.\n * Compressed form of EC public key is referred to RFC 5480 {@link https://tools.ietf.org/html/rfc5480}.\n * @param {JsonWebKey} jwkey - A key object in JWK format to be encoded to SEC1 octet format key.\n * @param {boolean} [outputPublic] - Export public key even from private key if true.\n * @param {OctetFormat} [outputFormat='binary'] - 'binary' or 'string'.\n * @param {boolean} [compact=false] - Export compressed form of public key if true.\n * @return {Uint8Array|string} - Encoded key object in JWK format.\n */\nexports.fromJwk = function (jwkey, _a) {\n    var outputPublic = _a.outputPublic, _b = _a.outputFormat, outputFormat = _b === void 0 ? 'binary' : _b, _c = _a.compact, compact = _c === void 0 ? false : _c;\n    // original key type\n    var orgType = util_1.getJwkType(jwkey);\n    var type = (typeof outputPublic === 'boolean' && outputPublic) ? 'public' : orgType;\n    if (type === 'public') {\n        var bufX = js_encoding_utils_1.default.encoder.decodeBase64Url(jwkey.x);\n        var bufY = js_encoding_utils_1.default.encoder.decodeBase64Url(jwkey.y);\n        var publicKey = void 0;\n        if (compact) {\n            // compressed form\n            // http://www.secg.org/SEC1-Ver-1.0.pdf\n            publicKey = new Uint8Array(bufX.length + 1);\n            publicKey[0] = 0xFF & ((0x01 & (bufY.slice(-1)[0])) + 0x02);\n            publicKey.set(bufX, 1);\n        }\n        else {\n            // uncompressed form\n            publicKey = new Uint8Array(bufX.length + bufY.length + 1);\n            publicKey[0] = 0xFF & 0x04;\n            publicKey.set(bufX, 1);\n            publicKey.set(bufY, bufX.length + 1);\n        }\n        return (outputFormat === 'string') ? js_encoding_utils_1.default.encoder.arrayBufferToHexString(publicKey) : publicKey;\n    }\n    else { //type === 'private'\n        if (!jwkey.d)\n            throw new Error('InvalidKey');\n        var bufD = js_encoding_utils_1.default.encoder.decodeBase64Url(jwkey.d);\n        return (outputFormat === 'string') ? js_encoding_utils_1.default.encoder.arrayBufferToHexString(bufD) : bufD;\n    }\n};\n/**\n * Convert Octet form of EC public/private keys to JWK.\n * @param {OctetEC} octkey - OctetEC key object in hex string format or Uint8Array.\n * @param {String} namedCurve - Name of elliptic curve like 'P-256'.\n * @param {boolean} [outputPublic] - Export public key even from private key if true.\n * @return {JsonWebKey} - Derived key object in JWK format.\n */\nexports.toJwk = function (octkey, namedCurve, _a) {\n    var outputPublic = _a.outputPublic;\n    if (Object.keys(params.namedCurves).indexOf(namedCurve) < 0)\n        throw new Error('UnsupportedCurve');\n    // original key type and check the key structure\n    var orgType = util_1.getSec1KeyType(octkey, namedCurve);\n    var type = (typeof outputPublic === 'boolean' && outputPublic) ? 'public' : orgType;\n    // format conversion\n    var binKey = (typeof octkey === 'string') ? js_encoding_utils_1.default.encoder.hexStringToArrayBuffer(octkey) : octkey;\n    // instantiation\n    var curve = params.namedCurves[namedCurve].indutnyName;\n    var ec = new Ec(curve);\n    // derive key object from binary key\n    var ecKey = (orgType === 'public') ? ec.keyFromPublic(binKey) : ec.keyFromPrivate(binKey);\n    var publicKey = new Uint8Array(ecKey.getPublic('array'));\n    var len = params.namedCurves[namedCurve].payloadSize;\n    var bufX = publicKey.slice(1, len + 1);\n    var bufY = publicKey.slice(len + 1, len * 2 + 1);\n    var jwKey = {\n        kty: 'EC',\n        crv: namedCurve,\n        x: js_encoding_utils_1.default.encoder.encodeBase64Url(bufX),\n        y: js_encoding_utils_1.default.encoder.encodeBase64Url(bufY)\n        // ext: true\n    };\n    if (type === 'private') {\n        // octkey is exactly private key if type is private.\n        jwKey.d = js_encoding_utils_1.default.encoder.encodeBase64Url(binKey);\n    }\n    return jwKey;\n};\n//# sourceMappingURL=octenc.js.map"]},"metadata":{},"sourceType":"script"}