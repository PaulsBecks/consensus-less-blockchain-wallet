{"ast":null,"code":"import getOpenTransactionBalance from \"./getOpenTransactionBalance\";\nexport default function findFormer(wallet, amount) {\n  const transactions = Object.values(wallet.transactions);\n  let rest = amount;\n  let former = {};\n\n  for (let i in transactions) {\n    let t = transactions[i];\n    const openTransactionBalance = getOpenTransactionBalance(transactions, t);\n    console.log(openTransactionBalance);\n\n    if (openTransactionBalance > 0) {\n      let val = Math.min(rest, openTransactionBalance);\n      former[t.sig] = val;\n      rest -= val;\n    }\n\n    if (rest <= 0) {\n      return former;\n    }\n\n    console.log(former, rest);\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/home/paul/Dokumente/Code/ConsensusLessBlockChain/consensusless-blockchain-wallet/src/services/wallet/findFormer.js"],"names":["getOpenTransactionBalance","findFormer","wallet","amount","transactions","Object","values","rest","former","i","t","openTransactionBalance","console","log","val","Math","min","sig"],"mappings":"AAAA,OAAOA,yBAAP,MAAsC,6BAAtC;AAEA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoC;AACjD,QAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAcJ,MAAM,CAACE,YAArB,CAArB;AACA,MAAIG,IAAI,GAAGJ,MAAX;AACA,MAAIK,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAT,IAAcL,YAAd,EAA4B;AAC1B,QAAIM,CAAC,GAAGN,YAAY,CAACK,CAAD,CAApB;AACA,UAAME,sBAAsB,GAAGX,yBAAyB,CAACI,YAAD,EAAeM,CAAf,CAAxD;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,sBAAZ;;AACA,QAAIA,sBAAsB,GAAG,CAA7B,EAAgC;AAC9B,UAAIG,GAAG,GAAGC,IAAI,CAACC,GAAL,CAAST,IAAT,EAAeI,sBAAf,CAAV;AACAH,MAAAA,MAAM,CAACE,CAAC,CAACO,GAAH,CAAN,GAAgBH,GAAhB;AACAP,MAAAA,IAAI,IAAIO,GAAR;AACD;;AACD,QAAIP,IAAI,IAAI,CAAZ,EAAe;AACb,aAAOC,MAAP;AACD;;AACDI,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ,EAAoBD,IAApB;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["import getOpenTransactionBalance from \"./getOpenTransactionBalance\";\n\nexport default function findFormer(wallet, amount) {\n  const transactions = Object.values(wallet.transactions);\n  let rest = amount;\n  let former = {};\n  for (let i in transactions) {\n    let t = transactions[i];\n    const openTransactionBalance = getOpenTransactionBalance(transactions, t);\n    console.log(openTransactionBalance);\n    if (openTransactionBalance > 0) {\n      let val = Math.min(rest, openTransactionBalance);\n      former[t.sig] = val;\n      rest -= val;\n    }\n    if (rest <= 0) {\n      return former;\n    }\n    console.log(former, rest);\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}