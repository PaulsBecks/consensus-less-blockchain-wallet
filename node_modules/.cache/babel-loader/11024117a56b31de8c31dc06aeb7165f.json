{"ast":null,"code":"\"use strict\";\n/**\n * encoder.js\n */\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar env = __importStar(require(\"./env\"));\n/**\n * Encode ArrayBuffer or TypedArray To Base64\n * @param data\n * @return {*}\n */\n\n\nexports.encodeBase64 = function (data) {\n  var str = '';\n  if (typeof data === 'string') str = data;else str = exports.arrayBufferToString(data);\n  var btoa = env.getEnvBtoa();\n  return btoa(str);\n};\n/**\n * Decode Base64 to Uint8Array\n * @param str\n * @return {Uint8Array|string|*}\n */\n\n\nexports.decodeBase64 = function (str) {\n  var atob = env.getEnvAtob();\n  var binary = atob(str);\n  var data = exports.stringToArrayBuffer(binary);\n  return getAsciiIfAscii(data);\n};\n/**\n * if input data is an ArrayBuffer or TypedArray, it would be returned as Uint8Array\n * @param data\n * @return {Uint8Array}\n */\n\n\nvar sanitizeTypedArrayAndArrayBuffer = function (data) {\n  if (data instanceof Uint8Array) return data;\n\n  if (ArrayBuffer.isView(data) && typeof data.buffer !== 'undefined') {\n    // TypedArray except Uint8Array\n    return new Uint8Array(data.buffer);\n  } else return new Uint8Array(data); // ArrayBuffer\n\n};\n/**\n * Check if the given Uint8Array can be expressed in Ascii Text\n * @param data\n * @return {Uint8Array|string|*}\n */\n\n\nvar getAsciiIfAscii = function (data) {\n  var flag = true;\n\n  for (var i = 0; i < data.length; i++) {\n    if (data[i] > 0x7e || data[i] < 0x20 && data[i] !== 0x0d && data[i] !== 0x0a) {\n      flag = false;\n      break;\n    }\n  }\n\n  var returnData = null;\n\n  if (flag) {\n    returnData = '';\n\n    for (var i = 0; i < data.length; i++) returnData += String.fromCharCode(data[i]);\n  } else returnData = data;\n\n  return returnData;\n};\n/**\n * Encode ArrayBuffer or TypedArray to base64url string\n * @param data\n * @return {string}\n */\n\n\nexports.encodeBase64Url = function (data) {\n  return exports.encodeBase64(data).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n};\n/**\n * Decode Base64Url string to Uint8Array\n * @param str\n * @return {Uint8Array}\n */\n\n\nexports.decodeBase64Url = function (str) {\n  str = str.replace(/-/g, '+').replace(/_/g, '/'); // str = str + \"=\".repeat(str.length % 4); // this sometimes causes error...\n\n  return exports.decodeBase64(str);\n};\n/**\n * Encode ArrayBuffer or TypedArray to hex string\n * @param data\n * @return {string}\n */\n\n\nexports.arrayBufferToHexString = function (data) {\n  var arr = sanitizeTypedArrayAndArrayBuffer(data);\n  var hexStr = '';\n\n  for (var i = 0; i < arr.length; i++) {\n    var hex = (arr[i] & 0xff).toString(16);\n    hex = hex.length === 1 ? \"0\" + hex : hex;\n    hexStr += hex;\n  }\n\n  return hexStr;\n};\n/**\n * Decode hex string to Uint8Array\n * @param str\n * @return {Uint8Array}\n */\n\n\nexports.hexStringToArrayBuffer = function (str) {\n  var arr = [];\n  var len = str.length;\n\n  for (var i = 0; i < len; i += 2) arr.push(parseInt(str.substr(i, 2), 16));\n\n  return new Uint8Array(arr);\n};\n/**\n * Encode ArrayBuffer or TypedArray to string with code (like output of legacy atob)\n * @param data\n * @return {string}\n */\n\n\nexports.arrayBufferToString = function (data) {\n  var bytes = sanitizeTypedArrayAndArrayBuffer(data);\n  var arr = new Array(bytes.length);\n  bytes.forEach(function (x, i) {\n    arr[i] = x;\n  });\n  return String.fromCharCode.apply(null, arr);\n};\n/**\n * Decode string with code (like output of legacy atob) to Uint8Array\n * @param str\n * @return {Uint8Array}\n */\n\n\nexports.stringToArrayBuffer = function (str) {\n  var bytes = new Uint8Array(str.length);\n  return bytes.map(function (_x, i) {\n    return str.charCodeAt(i);\n  });\n};","map":{"version":3,"sources":["/home/paul/Dokumente/Code/ConsensusLessBlockChain/consensusless-blockchain-wallet/node_modules/js-encoding-utils/dist/encoder.js"],"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","env","require","encodeBase64","data","str","arrayBufferToString","btoa","getEnvBtoa","decodeBase64","atob","getEnvAtob","binary","stringToArrayBuffer","getAsciiIfAscii","sanitizeTypedArrayAndArrayBuffer","Uint8Array","ArrayBuffer","isView","buffer","flag","i","length","returnData","String","fromCharCode","encodeBase64Url","replace","decodeBase64Url","arrayBufferToHexString","arr","hexStr","hex","toString","hexStringToArrayBuffer","len","push","parseInt","substr","bytes","Array","forEach","x","apply","map","_x","charCodeAt"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * encoder.js\n */\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar env = __importStar(require(\"./env\"));\n/**\n * Encode ArrayBuffer or TypedArray To Base64\n * @param data\n * @return {*}\n */\nexports.encodeBase64 = function (data) {\n    var str = '';\n    if (typeof data === 'string')\n        str = data;\n    else\n        str = exports.arrayBufferToString(data);\n    var btoa = env.getEnvBtoa();\n    return btoa(str);\n};\n/**\n * Decode Base64 to Uint8Array\n * @param str\n * @return {Uint8Array|string|*}\n */\nexports.decodeBase64 = function (str) {\n    var atob = env.getEnvAtob();\n    var binary = atob(str);\n    var data = exports.stringToArrayBuffer(binary);\n    return getAsciiIfAscii(data);\n};\n/**\n * if input data is an ArrayBuffer or TypedArray, it would be returned as Uint8Array\n * @param data\n * @return {Uint8Array}\n */\nvar sanitizeTypedArrayAndArrayBuffer = function (data) {\n    if (data instanceof Uint8Array)\n        return data;\n    if (ArrayBuffer.isView(data) && typeof data.buffer !== 'undefined') { // TypedArray except Uint8Array\n        return new Uint8Array(data.buffer);\n    }\n    else\n        return new Uint8Array(data); // ArrayBuffer\n};\n/**\n * Check if the given Uint8Array can be expressed in Ascii Text\n * @param data\n * @return {Uint8Array|string|*}\n */\nvar getAsciiIfAscii = function (data) {\n    var flag = true;\n    for (var i = 0; i < data.length; i++) {\n        if (data[i] > 0x7e || (data[i] < 0x20 && data[i] !== 0x0d && data[i] !== 0x0a)) {\n            flag = false;\n            break;\n        }\n    }\n    var returnData = null;\n    if (flag) {\n        returnData = '';\n        for (var i = 0; i < data.length; i++)\n            returnData += String.fromCharCode(data[i]);\n    }\n    else\n        returnData = data;\n    return returnData;\n};\n/**\n * Encode ArrayBuffer or TypedArray to base64url string\n * @param data\n * @return {string}\n */\nexports.encodeBase64Url = function (data) { return exports.encodeBase64(data).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, ''); };\n/**\n * Decode Base64Url string to Uint8Array\n * @param str\n * @return {Uint8Array}\n */\nexports.decodeBase64Url = function (str) {\n    str = str.replace(/-/g, '+').replace(/_/g, '/');\n    // str = str + \"=\".repeat(str.length % 4); // this sometimes causes error...\n    return exports.decodeBase64(str);\n};\n/**\n * Encode ArrayBuffer or TypedArray to hex string\n * @param data\n * @return {string}\n */\nexports.arrayBufferToHexString = function (data) {\n    var arr = sanitizeTypedArrayAndArrayBuffer(data);\n    var hexStr = '';\n    for (var i = 0; i < arr.length; i++) {\n        var hex = (arr[i] & 0xff).toString(16);\n        hex = (hex.length === 1) ? \"0\" + hex : hex;\n        hexStr += hex;\n    }\n    return hexStr;\n};\n/**\n * Decode hex string to Uint8Array\n * @param str\n * @return {Uint8Array}\n */\nexports.hexStringToArrayBuffer = function (str) {\n    var arr = [];\n    var len = str.length;\n    for (var i = 0; i < len; i += 2)\n        arr.push(parseInt(str.substr(i, 2), 16));\n    return new Uint8Array(arr);\n};\n/**\n * Encode ArrayBuffer or TypedArray to string with code (like output of legacy atob)\n * @param data\n * @return {string}\n */\nexports.arrayBufferToString = function (data) {\n    var bytes = sanitizeTypedArrayAndArrayBuffer(data);\n    var arr = new Array(bytes.length);\n    bytes.forEach(function (x, i) { arr[i] = x; });\n    return String.fromCharCode.apply(null, arr);\n};\n/**\n * Decode string with code (like output of legacy atob) to Uint8Array\n * @param str\n * @return {Uint8Array}\n */\nexports.stringToArrayBuffer = function (str) {\n    var bytes = new Uint8Array(str.length);\n    return bytes.map(function (_x, i) { return str.charCodeAt(i); });\n};\n//# sourceMappingURL=encoder.js.map"]},"metadata":{},"sourceType":"script"}