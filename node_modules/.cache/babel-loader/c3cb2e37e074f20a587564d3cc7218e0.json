{"ast":null,"code":"\"use strict\";\n/**\n * asn1ec.js\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar asn1_js_1 = __importDefault(require(\"asn1.js\"));\n\nvar params = __importStar(require(\"./params\"));\n\nvar octenc_1 = require(\"./octenc\");\n/**\n * Convert JWK to parsed ASN.1 EC key object\n * @param {JsonWebKey} jwk - A key object in JWK format.\n * @param {PublicOrPrivate} type - 'public' or 'private'\n * @param {boolean} [compact=false] - *Only for EC public keys*, the compact form of public key is given as ASN.1 object if true.\n * @return {Object} - Parsed ASN.1 object.\n */\n\n\nexports.fromJWK = function (jwk, type, compact) {\n  if (compact === void 0) {\n    compact = false;\n  }\n\n  var octetPublicKey = octenc_1.fromJwk(jwk, {\n    outputFormat: 'binary',\n    outputPublic: true,\n    compact: compact\n  });\n  var publicKeyAlgorithmOid = params.publicKeyAlgorithms['EC'].oid;\n  var publicKey = {\n    unused: 0,\n    data: Array.from(octetPublicKey)\n  }; //Buffer.from(octkeyObj.publicKey)};\n\n  var parameters = ECParameters.encode({\n    type: 'namedCurve',\n    value: params.namedCurves[jwk.crv].oid\n  }, 'der');\n  var algorithm = {\n    algorithm: publicKeyAlgorithmOid,\n    parameters: parameters\n  };\n  var decoded = {};\n\n  if (type === 'public') {\n    // SPKI\n    decoded.subjectPublicKey = publicKey;\n    decoded.algorithm = algorithm;\n  } else if (type === 'private') {\n    // PKCS8\n    var octetPrivateKey = octenc_1.fromJwk(jwk, {\n      outputFormat: 'binary',\n      outputPublic: false,\n      compact: compact\n    });\n    decoded.version = 0; // no public key presents for v2 (0)\n\n    decoded.privateKeyAlgorithm = algorithm;\n    decoded.privateKey = ECPrivateKey.encode({\n      version: 1,\n      privateKey: Array.from(octetPrivateKey),\n      parameters: parameters,\n      publicKey: publicKey\n    }, 'der');\n  }\n\n  return decoded;\n};\n/**\n * Convert parsed ASN.1 EC key object to JWK.\n * @param {Object} decoded - Parsed ASN.1 EC key object.\n * @param {PublicOrPrivate} type - 'public' or 'private'\n * @return {JsonWebKey} - Converted key objects in JWK format.\n * @throws {Error} - Throws if UnsupportedCurve.\n */\n\n\nexports.toJWK = function (decoded, type) {\n  if (type === 'public') {\n    // SPKI\n    decoded.algorithm.parameters = ECParameters.decode(decoded.algorithm.parameters, 'der'); // overwrite nested binary object as parsed object\n\n    var octPubKey = new Uint8Array(decoded.subjectPublicKey.data); // convert oct key to jwk\n\n    var namedCurves = params.getAlgorithmFromOid(decoded.algorithm.parameters.value, params.namedCurves);\n    return octenc_1.toJwk(octPubKey, namedCurves[0], {\n      outputPublic: true\n    });\n  } else {\n    // type === 'private', PKCS8\n    decoded.privateKeyAlgorithm.parameters = ECParameters.decode(decoded.privateKeyAlgorithm.parameters, 'der'); // Work around for optional private key parameter field.\n\n    try {\n      decoded.privateKey = ECPrivateKey.decode(decoded.privateKey, 'der');\n    } catch (e) {\n      decoded.privateKey = ECPrivateKeyAlt.decode(decoded.privateKey, 'der');\n    }\n\n    var octPrivKey = new Uint8Array(decoded.privateKey.privateKey);\n    var namedCurves = params.getAlgorithmFromOid(decoded.privateKeyAlgorithm.parameters.value, params.namedCurves);\n    if (namedCurves.length < 1) throw new Error('UnsupportedCurve');\n    return octenc_1.toJwk(octPrivKey, namedCurves[0], {\n      outputPublic: false\n    });\n  }\n}; /////////////////////////\n\n/**\n * ECParameters specified in RFC 5480 {@link https://tools.ietf.org/html/rfc5480}.\n * @type {AsnObject}\n */\n\n\nvar ECParameters = asn1_js_1.default.define('ECParameters', function () {\n  // @ts-ignore\n  this.choice({\n    // @ts-ignore\n    namedCurve: this.objid()\n  });\n});\n/**\n * ECPrivateKey specified in RFC 5915 {@link https://tools.ietf.org/html/rfc5915}.\n * @type {AsnObject}\n */\n\nvar ECPrivateKey = asn1_js_1.default.define('ECPrivateKey', function () {\n  // @ts-ignore\n  this.seq().obj( // @ts-ignore\n  this.key('version').int(), // @ts-ignore\n  this.key('privateKey').octstr(), // @ts-ignore\n  this.key('parameters').explicit(0).optional().any(), // rfc suggested that this must be implemented\n  // @ts-ignore\n  this.key('publicKey').explicit(1).optional().bitstr() // rfc suggested that this must be implemented\n  );\n});\n/**\n * ECPrivateKey Alternative for an work around...\n * @type {AsnObject}\n */\n\nvar ECPrivateKeyAlt = asn1_js_1.default.define('ECPrivateKey', function () {\n  // @ts-ignore\n  this.seq().obj( // @ts-ignore\n  this.key('version').int(), // @ts-ignore\n  this.key('privateKey').octstr(), // this.key('parameters').explicit(0).optional().any(), // rfc suggested that this must be implemented\n  // @ts-ignore\n  this.key('publicKey').explicit(1).optional().bitstr() // rfc suggested that this must be implemented\n  );\n});","map":{"version":3,"sources":["/home/paul/Dokumente/Code/ConsensusLessBlockChain/consensusless-blockchain-wallet/node_modules/js-crypto-key-utils/dist/asn1ec.js"],"names":["__importDefault","mod","__esModule","__importStar","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","asn1_js_1","require","params","octenc_1","fromJWK","jwk","type","compact","octetPublicKey","fromJwk","outputFormat","outputPublic","publicKeyAlgorithmOid","publicKeyAlgorithms","oid","publicKey","unused","data","Array","from","parameters","ECParameters","encode","namedCurves","crv","algorithm","decoded","subjectPublicKey","octetPrivateKey","version","privateKeyAlgorithm","privateKey","ECPrivateKey","toJWK","decode","octPubKey","Uint8Array","getAlgorithmFromOid","toJwk","e","ECPrivateKeyAlt","octPrivKey","length","Error","default","define","choice","namedCurve","objid","seq","obj","key","int","octstr","explicit","optional","any","bitstr"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * asn1ec.js\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar asn1_js_1 = __importDefault(require(\"asn1.js\"));\nvar params = __importStar(require(\"./params\"));\nvar octenc_1 = require(\"./octenc\");\n/**\n * Convert JWK to parsed ASN.1 EC key object\n * @param {JsonWebKey} jwk - A key object in JWK format.\n * @param {PublicOrPrivate} type - 'public' or 'private'\n * @param {boolean} [compact=false] - *Only for EC public keys*, the compact form of public key is given as ASN.1 object if true.\n * @return {Object} - Parsed ASN.1 object.\n */\nexports.fromJWK = function (jwk, type, compact) {\n    if (compact === void 0) { compact = false; }\n    var octetPublicKey = octenc_1.fromJwk(jwk, { outputFormat: 'binary', outputPublic: true, compact: compact });\n    var publicKeyAlgorithmOid = params.publicKeyAlgorithms['EC'].oid;\n    var publicKey = { unused: 0, data: Array.from(octetPublicKey) }; //Buffer.from(octkeyObj.publicKey)};\n    var parameters = ECParameters.encode({ type: 'namedCurve', value: params.namedCurves[jwk.crv].oid }, 'der');\n    var algorithm = { algorithm: publicKeyAlgorithmOid, parameters: parameters };\n    var decoded = {};\n    if (type === 'public') { // SPKI\n        decoded.subjectPublicKey = publicKey;\n        decoded.algorithm = algorithm;\n    }\n    else if (type === 'private') { // PKCS8\n        var octetPrivateKey = octenc_1.fromJwk(jwk, { outputFormat: 'binary', outputPublic: false, compact: compact });\n        decoded.version = 0; // no public key presents for v2 (0)\n        decoded.privateKeyAlgorithm = algorithm;\n        decoded.privateKey = ECPrivateKey.encode({\n            version: 1,\n            privateKey: Array.from(octetPrivateKey),\n            parameters: parameters,\n            publicKey: publicKey\n        }, 'der');\n    }\n    return decoded;\n};\n/**\n * Convert parsed ASN.1 EC key object to JWK.\n * @param {Object} decoded - Parsed ASN.1 EC key object.\n * @param {PublicOrPrivate} type - 'public' or 'private'\n * @return {JsonWebKey} - Converted key objects in JWK format.\n * @throws {Error} - Throws if UnsupportedCurve.\n */\nexports.toJWK = function (decoded, type) {\n    if (type === 'public') { // SPKI\n        decoded.algorithm.parameters = ECParameters.decode(decoded.algorithm.parameters, 'der'); // overwrite nested binary object as parsed object\n        var octPubKey = new Uint8Array(decoded.subjectPublicKey.data); // convert oct key to jwk\n        var namedCurves = params.getAlgorithmFromOid(decoded.algorithm.parameters.value, params.namedCurves);\n        return octenc_1.toJwk(octPubKey, namedCurves[0], { outputPublic: true });\n    }\n    else { // type === 'private', PKCS8\n        decoded.privateKeyAlgorithm.parameters = ECParameters.decode(decoded.privateKeyAlgorithm.parameters, 'der');\n        // Work around for optional private key parameter field.\n        try {\n            decoded.privateKey = ECPrivateKey.decode(decoded.privateKey, 'der');\n        }\n        catch (e) {\n            decoded.privateKey = ECPrivateKeyAlt.decode(decoded.privateKey, 'der');\n        }\n        var octPrivKey = new Uint8Array(decoded.privateKey.privateKey);\n        var namedCurves = params.getAlgorithmFromOid(decoded.privateKeyAlgorithm.parameters.value, params.namedCurves);\n        if (namedCurves.length < 1)\n            throw new Error('UnsupportedCurve');\n        return octenc_1.toJwk(octPrivKey, namedCurves[0], { outputPublic: false });\n    }\n};\n/////////////////////////\n/**\n * ECParameters specified in RFC 5480 {@link https://tools.ietf.org/html/rfc5480}.\n * @type {AsnObject}\n */\nvar ECParameters = asn1_js_1.default.define('ECParameters', function () {\n    // @ts-ignore\n    this.choice({\n        // @ts-ignore\n        namedCurve: this.objid()\n    });\n});\n/**\n * ECPrivateKey specified in RFC 5915 {@link https://tools.ietf.org/html/rfc5915}.\n * @type {AsnObject}\n */\nvar ECPrivateKey = asn1_js_1.default.define('ECPrivateKey', function () {\n    // @ts-ignore\n    this.seq().obj(\n    // @ts-ignore\n    this.key('version').int(), \n    // @ts-ignore\n    this.key('privateKey').octstr(), \n    // @ts-ignore\n    this.key('parameters').explicit(0).optional().any(), // rfc suggested that this must be implemented\n    // @ts-ignore\n    this.key('publicKey').explicit(1).optional().bitstr() // rfc suggested that this must be implemented\n    );\n});\n/**\n * ECPrivateKey Alternative for an work around...\n * @type {AsnObject}\n */\nvar ECPrivateKeyAlt = asn1_js_1.default.define('ECPrivateKey', function () {\n    // @ts-ignore\n    this.seq().obj(\n    // @ts-ignore\n    this.key('version').int(), \n    // @ts-ignore\n    this.key('privateKey').octstr(), \n    // this.key('parameters').explicit(0).optional().any(), // rfc suggested that this must be implemented\n    // @ts-ignore\n    this.key('publicKey').explicit(1).optional().bitstr() // rfc suggested that this must be implemented\n    );\n});\n//# sourceMappingURL=asn1ec.js.map"]},"metadata":{},"sourceType":"script"}