/**
 * params.ts
 */
export declare const namedCurves: {
    [index: string]: {
        indutnyName: string;
        payloadSize: number;
        oid: number[];
    };
};
export declare const publicKeyAlgorithms: {
    [index: string]: {
        oid: number[];
    };
};
export declare const passwordBasedEncryptionSchemes: {
    [index: string]: {
        oid: number[];
        hash?: string;
        encrypt?: string;
    };
};
export declare const keyDerivationFunctions: {
    [index: string]: {
        oid: number[];
        defaultSaltLen: number;
    };
};
export declare const pbkdf2Prfs: {
    [index: string]: {
        oid: number[];
        hash: string;
    };
};
export declare const encryptionSchemes: {
    [index: string]: {
        oid: number[];
        keyLength: number;
        ivLength: number;
    };
};
export declare const hashes: {
    [index: string]: {
        hashSize: number;
    };
};
/**
 * Get algorithm name from ObjectIdentifier array loosely.
 * @param {Array<number>} oid - ObjectIdentifier.
 * @param {Object} oidDict - Dictionary of ObjectIdentifier.
 * @return {Array} - Array of ObjectIdentifier array.
 */
export declare function getAlgorithmFromOid(oid: Array<number>, oidDict: any): string[];
/**
 * Get algorithm name from ObjectIdentifier array strictly.
 * @param {Array<number>} oid - ObjectIdentifier.
 * @param {Object} dict - Dictionary of ObjectIdentifier.
 * @return {Array} - Exactly one ObjectIdentifier.
 * @throws {Error} - Throws if UnsupportedAlgorithm.
 */
export declare const getAlgorithmFromOidStrict: (oid: number[], dict: any) => string;
