"use strict";
/**
 * thumbprint.js
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var js_encoding_utils_1 = __importDefault(require("js-encoding-utils"));
var js_crypto_hash_1 = __importDefault(require("js-crypto-hash"));
var buffer_1 = __importDefault(require("buffer"));
var Buffer = buffer_1.default.Buffer;
/**
 * Compute JWK public key thumbprint specified in RFC7638
 * https://tools.ietf.org/html/rfc7638
 * @param {JsonWebKey} jwkey - A key object in JWK format
 * @param {HashTypes} [alg='SHA-256'] - Name of hash algorithm to compute the thumbprint.
 * @param {JwkThumbprintFormat} [output='binary'] - Output format, 'binary', 'hex' or 'base64'
 * @return {Promise<String|Uint8Array>} - The computed JWK thumbprint.
 */
exports.getJwkThumbprint = function (jwkey, alg, output) {
    if (alg === void 0) { alg = 'SHA-256'; }
    if (output === void 0) { output = 'binary'; }
    return __awaiter(void 0, void 0, void 0, function () {
        var jsonString, uint8json, thumbPrintBuf;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // assertion
                    if (['hex', 'binary'].indexOf(output) < 0)
                        throw new Error('UnsupportedOutputFormat');
                    if (jwkey.kty === 'EC') {
                        jsonString = JSON.stringify({ crv: jwkey.crv, kty: jwkey.kty, x: jwkey.x, y: jwkey.y });
                    }
                    else if (jwkey.kty === 'RSA') {
                        jsonString = JSON.stringify({ e: jwkey.e, kty: jwkey.kty, n: jwkey.n });
                    }
                    else
                        throw new Error('UnsupportedKeyType');
                    uint8json = new Uint8Array(Buffer.from(jsonString, 'utf8'));
                    return [4 /*yield*/, js_crypto_hash_1.default.compute(uint8json, alg)];
                case 1:
                    thumbPrintBuf = _a.sent();
                    if (output === 'hex')
                        return [2 /*return*/, js_encoding_utils_1.default.encoder.arrayBufferToHexString(thumbPrintBuf)];
                    else if (output === 'base64')
                        return [2 /*return*/, js_encoding_utils_1.default.encoder.encodeBase64(thumbPrintBuf)];
                    else
                        return [2 /*return*/, thumbPrintBuf]; // output === 'binary'
                    return [2 /*return*/];
            }
        });
    });
};
//# sourceMappingURL=thumbprint.js.map