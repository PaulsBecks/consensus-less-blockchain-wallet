"use strict";
/**
 * asn1enc.js
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var asn1ec = __importStar(require("./asn1ec"));
var asn1rsa = __importStar(require("./asn1rsa"));
var params_1 = require("./params");
var js_encoding_utils_1 = __importDefault(require("js-encoding-utils"));
var buffer_1 = __importDefault(require("buffer"));
var asn1def_1 = require("./asn1def");
var rfc8018_1 = require("./rfc8018");
var util_1 = require("./util");
var Buffer = buffer_1.default.Buffer;
/**
 * Convert jwk to spki/pkcs8 in string or binary format.
 * @param {JsonWebKey} jwkey - A key object in JWK format to be encoded.
 * @param {boolean} outputPublic - Derive public key from private key when true
 * @param {AsnFormat} format - 'pem' or 'der'
 * @param {boolean} compact - 'true' or 'false' for EC public key compressed representation in der/pem
 * @param {String} passphrase - if passphrase is given and the given key is private key, it will be encoded with the passphrase.
 * @param {AsnEncryptOptionsWithPassphrase} encOptions - ASN.1 encryption options
 * @return {Uint8Array|String} - Encoded private key in DER or PEM
 */
exports.fromJwk = function (jwkey, format, _a) {
    var outputPublic = _a.outputPublic, _b = _a.compact, compact = _b === void 0 ? false : _b, encOptions = _a.encOptions;
    return __awaiter(void 0, void 0, void 0, function () {
        var orgType, type, decoded, binKey;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    orgType = util_1.getJwkType(jwkey);
                    type = (typeof outputPublic === 'boolean' && outputPublic) ? 'public' : orgType;
                    if (jwkey.kty === 'EC') {
                        decoded = asn1ec.fromJWK(jwkey, type, compact);
                    }
                    else if (jwkey.kty === 'RSA') {
                        decoded = asn1rsa.fromJwk(jwkey, type);
                    }
                    if (!(type === 'public')) return [3 /*break*/, 1];
                    binKey = asn1def_1.SubjectPublicKeyInfo.encode(decoded, 'der');
                    return [3 /*break*/, 3];
                case 1:
                    binKey = asn1def_1.OneAsymmetricKey.encode(decoded, 'der');
                    if (!(typeof encOptions !== 'undefined' && typeof encOptions.passphrase !== 'undefined' && encOptions.passphrase.length > 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, rfc8018_1.encryptEncryptedPrivateKeyInfo(binKey, encOptions)];
                case 2:
                    binKey = _c.sent();
                    type = 'encryptedPrivate';
                    _c.label = 3;
                case 3:
                    binKey = new Uint8Array(binKey);
                    return [2 /*return*/, (format === 'pem') ? js_encoding_utils_1.default.formatter.binToPem(binKey, type) : binKey];
            }
        });
    });
};
/**
 * Convert SPKI/PKCS8 key in string or binary format to JWK.
 * @param {PEM|DER} key - Key object.
 * @param {AsnFormat} format - 'pem' or 'der'
 * @param {boolean} [outputPublic] - Export public key even from private key if true.
 * @param {String} [passphrase] - Encrypt private key if passphrase is given.
 * @return {JsonWebKey} - Obtained key object in JWK format.
 * @throws {Error} Throws if UnsupportedKeyStructure, UnsupportedKey or InvalidKeyType.
 */
exports.toJwk = function (key, format, _a) {
    var outputPublic = _a.outputPublic, passphrase = _a.passphrase;
    return __awaiter(void 0, void 0, void 0, function () {
        var binKey, decoded, type, keyTypes;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    binKey = (format === 'pem') ? js_encoding_utils_1.default.formatter.pemToBin(key) : key;
                    try {
                        decoded = asn1def_1.KeyStructure.decode(Buffer.from(binKey), 'der');
                    }
                    catch (e) {
                        throw new Error('FailedToDecodeKey');
                    }
                    if (!(decoded.type === 'subjectPublicKeyInfo')) return [3 /*break*/, 1];
                    type = 'public';
                    decoded = decoded.value;
                    return [3 /*break*/, 4];
                case 1:
                    type = (typeof outputPublic === 'boolean' && outputPublic) ? 'public' : 'private';
                    if (!(decoded.type === 'encryptedPrivateKeyInfo')) return [3 /*break*/, 3];
                    return [4 /*yield*/, rfc8018_1.decryptEncryptedPrivateKeyInfo(decoded.value, passphrase)];
                case 2:
                    decoded = _b.sent();
                    return [3 /*break*/, 4];
                case 3:
                    if (decoded.type === 'oneAsymmetricKey')
                        decoded = decoded.value;
                    else
                        throw new Error('UnsupportedKeyStructure');
                    _b.label = 4;
                case 4:
                    keyTypes = params_1.getAlgorithmFromOid((type === 'public') ? decoded.algorithm.algorithm : decoded.privateKeyAlgorithm.algorithm, params_1.publicKeyAlgorithms);
                    if (keyTypes.length < 1)
                        throw new Error('UnsupportedKey');
                    if (keyTypes[0] === 'EC') {
                        return [2 /*return*/, asn1ec.toJWK(decoded, type)];
                    }
                    else if (keyTypes[0] === 'RSA') {
                        return [2 /*return*/, asn1rsa.toJwk(decoded, type)];
                    }
                    else
                        throw new Error('InvalidKeyType');
                    return [2 /*return*/];
            }
        });
    });
};
//# sourceMappingURL=asn1enc.js.map