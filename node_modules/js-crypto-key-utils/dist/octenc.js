"use strict";
/**
 * octenc.js
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var params = __importStar(require("./params"));
var js_encoding_utils_1 = __importDefault(require("js-encoding-utils"));
var elliptic_1 = __importDefault(require("elliptic"));
var util_1 = require("./util");
var Ec = elliptic_1.default.ec;
/**
 * Convert JWK EC public/private keys to octet form.
 * Compressed form of EC public key is referred to RFC 5480 {@link https://tools.ietf.org/html/rfc5480}.
 * @param {JsonWebKey} jwkey - A key object in JWK format to be encoded to SEC1 octet format key.
 * @param {boolean} [outputPublic] - Export public key even from private key if true.
 * @param {OctetFormat} [outputFormat='binary'] - 'binary' or 'string'.
 * @param {boolean} [compact=false] - Export compressed form of public key if true.
 * @return {Uint8Array|string} - Encoded key object in JWK format.
 */
exports.fromJwk = function (jwkey, _a) {
    var outputPublic = _a.outputPublic, _b = _a.outputFormat, outputFormat = _b === void 0 ? 'binary' : _b, _c = _a.compact, compact = _c === void 0 ? false : _c;
    // original key type
    var orgType = util_1.getJwkType(jwkey);
    var type = (typeof outputPublic === 'boolean' && outputPublic) ? 'public' : orgType;
    if (type === 'public') {
        var bufX = js_encoding_utils_1.default.encoder.decodeBase64Url(jwkey.x);
        var bufY = js_encoding_utils_1.default.encoder.decodeBase64Url(jwkey.y);
        var publicKey = void 0;
        if (compact) {
            // compressed form
            // http://www.secg.org/SEC1-Ver-1.0.pdf
            publicKey = new Uint8Array(bufX.length + 1);
            publicKey[0] = 0xFF & ((0x01 & (bufY.slice(-1)[0])) + 0x02);
            publicKey.set(bufX, 1);
        }
        else {
            // uncompressed form
            publicKey = new Uint8Array(bufX.length + bufY.length + 1);
            publicKey[0] = 0xFF & 0x04;
            publicKey.set(bufX, 1);
            publicKey.set(bufY, bufX.length + 1);
        }
        return (outputFormat === 'string') ? js_encoding_utils_1.default.encoder.arrayBufferToHexString(publicKey) : publicKey;
    }
    else { //type === 'private'
        if (!jwkey.d)
            throw new Error('InvalidKey');
        var bufD = js_encoding_utils_1.default.encoder.decodeBase64Url(jwkey.d);
        return (outputFormat === 'string') ? js_encoding_utils_1.default.encoder.arrayBufferToHexString(bufD) : bufD;
    }
};
/**
 * Convert Octet form of EC public/private keys to JWK.
 * @param {OctetEC} octkey - OctetEC key object in hex string format or Uint8Array.
 * @param {String} namedCurve - Name of elliptic curve like 'P-256'.
 * @param {boolean} [outputPublic] - Export public key even from private key if true.
 * @return {JsonWebKey} - Derived key object in JWK format.
 */
exports.toJwk = function (octkey, namedCurve, _a) {
    var outputPublic = _a.outputPublic;
    if (Object.keys(params.namedCurves).indexOf(namedCurve) < 0)
        throw new Error('UnsupportedCurve');
    // original key type and check the key structure
    var orgType = util_1.getSec1KeyType(octkey, namedCurve);
    var type = (typeof outputPublic === 'boolean' && outputPublic) ? 'public' : orgType;
    // format conversion
    var binKey = (typeof octkey === 'string') ? js_encoding_utils_1.default.encoder.hexStringToArrayBuffer(octkey) : octkey;
    // instantiation
    var curve = params.namedCurves[namedCurve].indutnyName;
    var ec = new Ec(curve);
    // derive key object from binary key
    var ecKey = (orgType === 'public') ? ec.keyFromPublic(binKey) : ec.keyFromPrivate(binKey);
    var publicKey = new Uint8Array(ecKey.getPublic('array'));
    var len = params.namedCurves[namedCurve].payloadSize;
    var bufX = publicKey.slice(1, len + 1);
    var bufY = publicKey.slice(len + 1, len * 2 + 1);
    var jwKey = {
        kty: 'EC',
        crv: namedCurve,
        x: js_encoding_utils_1.default.encoder.encodeBase64Url(bufX),
        y: js_encoding_utils_1.default.encoder.encodeBase64Url(bufY)
        // ext: true
    };
    if (type === 'private') {
        // octkey is exactly private key if type is private.
        jwKey.d = js_encoding_utils_1.default.encoder.encodeBase64Url(binKey);
    }
    return jwKey;
};
//# sourceMappingURL=octenc.js.map