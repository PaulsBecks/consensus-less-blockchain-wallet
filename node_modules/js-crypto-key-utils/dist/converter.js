"use strict";
/**
 * converter.js
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var asn1enc = __importStar(require("./asn1enc"));
var octenc = __importStar(require("./octenc"));
// ASN.1 in RFC5280 (SPKI) and RFC5208 (PKCS8) -> RSA and EC, encode='asn', format='pem' or 'der'
// -> SPKI (in X.509): RFC5280 for public key, PKCS8: RFC5208 for private key
// Octet Form in ANSI X9.63 -> EC, encode='oct', format='string' or 'binary', compact=true or false
// -> Standards for Efficient Cryptography Group (SECG), "SEC1: Elliptic Curve Cryptography", Version 1.0, September 2000.
/**
 * Convert JWK to ASN.1 (for RSA and EC) and Octet (for EC) encoded keys.
 * @param {'pem'|'der'|'oct'} output - 'pem', 'der', or 'oct' (only EC JWK), output format.
 * @param {JsonWebKey} jwkey - A JWK to be encoded.
 * @param {KeyExportOptions} options - Options to export key including encryption options.
 *   For EC JWK : options.compact = true or false
 *   For EC JWK with output = 'oct' : options.format = 'binary' or 'string'
 *   For both: outputPublic (optional) : boolean. derived key type. from private key, public key can be derived when true.
 * @return {PEM|DER|OctetEC} - Output key object.
 */
exports.fromJwkTo = function (output, jwkey, options) {
    if (output === void 0) { output = 'pem'; }
    if (options === void 0) { options = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // assertion
                    if (jwkey.kty !== 'EC' && jwkey.kty !== 'RSA')
                        throw new Error('UnsupportedKeyType');
                    // default values
                    if (jwkey.kty === 'EC' && typeof options.compact === 'undefined')
                        options.compact = false;
                    if (output === 'oct' && options.output !== 'string')
                        options.output = 'binary';
                    if (typeof options.encryptParams === 'undefined')
                        options.encryptParams = { passphrase: '' };
                    if ((output === 'der' || output === 'pem') && typeof options.encryptParams.passphrase === 'undefined')
                        options.encryptParams.passphrase = '';
                    if (!(output === 'der' || output === 'pem')) return [3 /*break*/, 2];
                    return [4 /*yield*/, asn1enc.fromJwk(jwkey, output, { outputPublic: options.outputPublic, compact: options.compact, encOptions: options.encryptParams })];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    if (output === 'oct' && jwkey.kty === 'EC') {
                        return [2 /*return*/, octenc.fromJwk(jwkey, { outputPublic: options.outputPublic, outputFormat: options.output, compact: options.compact })];
                    }
                    else
                        throw new Error('UnsupportedConversion');
                    _a.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    });
};
/**
 * Convert ASN.1 encoded (for RSA and EC) or octet formed (for EC) keys to JWK.
 * @param {'pem'|'der'|'oct'} input - 'pem', 'der' or 'oct', input key format.
 * @param {PEM|DER|OctetEC} key - A key object to be encoded.
 * @param {JwkExportOptionsInternal} [options={}] - options to export JWK keys.
 * @return {JsonWebKey} - Obtained key object in JWK format.
 * @throws {Error} - Throws if InvalidInputForm, InappropriateOptions, outputPublicMustBeBoolean or UnsupportedConversion
 */
exports.toJwkFrom = function (input, key, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // assertion
                    if (input === 'oct' && !options.namedCurve)
                        throw new Error('InappropriateOptions');
                    // default values
                    if ((input === 'der' || input === 'pem') && typeof options.passphrase === 'undefined')
                        options.passphrase = '';
                    if (!(input === 'der' || input === 'pem')) return [3 /*break*/, 2];
                    return [4 /*yield*/, asn1enc.toJwk(key, input, { outputPublic: options.outputPublic, passphrase: options.passphrase })];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    if (input === 'oct') {
                        return [2 /*return*/, octenc.toJwk(key, options.namedCurve, { outputPublic: options.outputPublic })];
                    }
                    else
                        throw new Error('UnsupportedConversion');
                    _a.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    });
};
//# sourceMappingURL=converter.js.map