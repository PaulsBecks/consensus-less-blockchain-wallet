"use strict";
/**
 * pss.js
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var params = __importStar(require("./params"));
// emLen = Math.ceil((modBits(=k) - 1)/8), e.g., Math.ceil(2047/8) = 256, that is exactly equal to k)
/**
 * Check PSS Length.
 * @param {String} mode - 'sign' or 'verify'
 * @param {Number} k - Octet length of modulus length, i.e., n.
 * @param {String} hash - Name of hash function.
 * @param {Number} saltLength - Length of salt.
 * @throws {Error} - Throws if Inconsistent, EncodingError, or InvalidMode.
 */
exports.checkLength = function (mode, _a) {
    var k = _a.k, hash = _a.hash, saltLength = _a.saltLength;
    if (mode === 'sign') {
        if (k > (1 << params.hashes[hash].maxInput) - 1)
            throw new Error('Inconsistent');
        if (k < params.hashes[hash].hashSize + saltLength + 2 || saltLength < 0)
            throw new Error('EncodingError');
    }
    else if (mode === 'verify') {
        if (k > (1 << params.hashes[hash].maxInput) - 1)
            throw new Error('Inconsistent');
        if (k < params.hashes[hash].hashSize + saltLength + 2 || saltLength < 0)
            throw new Error('Inconsistent');
    }
    else
        throw new Error('InvalidMode');
};
//# sourceMappingURL=pss.js.map