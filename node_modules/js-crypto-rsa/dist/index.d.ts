/**
 * index.js
 */
export declare const generateKey: (modulusLength?: import("./typedef").ModulusLength, publicExponent?: Uint8Array) => Promise<import("./typedef").JsonWebKeyPair>;
export declare const sign: (msg: Uint8Array, privateJwk: JsonWebKey, hash?: import("./typedef").HashTypes, algorithm?: import("./typedef").RSASignAlgorithm) => Promise<Uint8Array>;
export declare const verify: (msg: Uint8Array, signature: Uint8Array, publicJwk: JsonWebKey, hash?: import("./typedef").HashTypes, algorithm?: import("./typedef").RSASignAlgorithm) => Promise<boolean>;
export declare const encrypt: (msg: Uint8Array, publicJwk: JsonWebKey, hash?: import("./typedef").HashTypes, label?: Uint8Array) => Promise<Uint8Array>;
export declare const decrypt: (data: Uint8Array, privateJwk: JsonWebKey, hash?: import("./typedef").HashTypes, label?: Uint8Array) => Promise<Uint8Array>;
declare const _default: {
    generateKey: (modulusLength?: import("./typedef").ModulusLength, publicExponent?: Uint8Array) => Promise<import("./typedef").JsonWebKeyPair>;
    sign: (msg: Uint8Array, privateJwk: JsonWebKey, hash?: import("./typedef").HashTypes, algorithm?: import("./typedef").RSASignAlgorithm) => Promise<Uint8Array>;
    verify: (msg: Uint8Array, signature: Uint8Array, publicJwk: JsonWebKey, hash?: import("./typedef").HashTypes, algorithm?: import("./typedef").RSASignAlgorithm) => Promise<boolean>;
    encrypt: (msg: Uint8Array, publicJwk: JsonWebKey, hash?: import("./typedef").HashTypes, label?: Uint8Array) => Promise<Uint8Array>;
    decrypt: (data: Uint8Array, privateJwk: JsonWebKey, hash?: import("./typedef").HashTypes, label?: Uint8Array) => Promise<Uint8Array>;
};
export default _default;
