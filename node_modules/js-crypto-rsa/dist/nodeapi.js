"use strict";
/**
 * nodeapi
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var params = __importStar(require("./params"));
var js_crypto_key_utils_1 = require("js-crypto-key-utils");
var js_encoding_utils_1 = __importDefault(require("js-encoding-utils"));
var oaep = __importStar(require("./oaep"));
var bn_js_1 = __importDefault(require("bn.js"));
/**
 * Generate RSA public/private key pair.
 * @param {Number} modulusLength - Modulus length in bits, i.e., n.
 * @param {Uint8Array} publicExponent - Public exponent, i.e, e.
 * @param {Object} nodeCrypto - NodeCrypto object.
 * @return {Promise<{publicKey: JsonWebKey, privateKey: JsonWebKey}>}
 * @throws {Error} - Throws if KeyGenerationFailedNode.
 */
exports.generateKey = function (modulusLength, publicExponent, nodeCrypto) { return __awaiter(void 0, void 0, void 0, function () {
    var pe, options, nodeKeyGen, keyPairDer, publicObj, privateObj, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                pe = new bn_js_1.default(publicExponent);
                options = {
                    modulusLength: modulusLength,
                    publicExponent: pe.toNumber(),
                    publicKeyEncoding: { type: 'spki', format: 'der' },
                    privateKeyEncoding: { type: 'pkcs8', format: 'der' }
                };
                nodeKeyGen = function () { return new Promise(function (resolve, reject) {
                    nodeCrypto.generateKeyPair('rsa', options, function (err, publicKey, privateKey) {
                        if (err)
                            reject('KeyGenerationFailedNode');
                        else
                            resolve({ publicKey: publicKey, privateKey: privateKey });
                    });
                }); };
                return [4 /*yield*/, nodeKeyGen().catch(function () { throw new Error('KeyGenerationFailedNode'); })];
            case 1:
                keyPairDer = _b.sent();
                publicObj = new js_crypto_key_utils_1.Key('der', new Uint8Array(keyPairDer.publicKey));
                privateObj = new js_crypto_key_utils_1.Key('der', new Uint8Array(keyPairDer.privateKey));
                _a = {};
                return [4 /*yield*/, publicObj.export('jwk')];
            case 2:
                _a.publicKey = (_b.sent());
                return [4 /*yield*/, privateObj.export('jwk')];
            case 3: return [2 /*return*/, (_a.privateKey = (_b.sent()),
                    _a)];
        }
    });
}); };
/**
 * RSA signing via RSA-PSS or RSASSA-PKCS1-v1_5 in Node.js.
 * @param {Uint8Array} msg - Byte array of message to be signed.
 * @param {JsonWebKey} privateJwk - Private key for signing in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'.
 * @param {Object} algorithm - Object to specify algorithm parameters.
 * @param {Object} nodeCrypto - NodeCrypto object
 * @return {Promise<Uint8Array>} - Byte array of raw signature.
 * @throws {Error} - Throws if NotPublicKeyForRSASign.
 */
exports.signRsa = function (msg, privateJwk, hash, algorithm, nodeCrypto) { return __awaiter(void 0, void 0, void 0, function () {
    var keyObj, privatePem, signing, opt;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                keyObj = new js_crypto_key_utils_1.Key('jwk', privateJwk);
                if (!keyObj.isPrivate)
                    throw new Error('NotPrivateKeyForRSASign');
                return [4 /*yield*/, keyObj.export('pem')];
            case 1:
                privatePem = _a.sent();
                signing = nodeCrypto.createSign(params.hashes[hash].nodeName);
                signing.update(msg);
                opt = (algorithm.name === 'RSA-PSS') ? { saltLength: algorithm.saltLength, padding: nodeCrypto.constants.RSA_PKCS1_PSS_PADDING } : {};
                return [2 /*return*/, new Uint8Array(signing.sign(Object.assign({ key: privatePem }, opt)))];
        }
    });
}); };
/**
 /**
 * Verification of RSA signature via RSA-PSS or RSASSA-PKCS1-v1_5 in Node.js.
 * @param {Uint8Array} msg - Byte array of message signed.
 * @param {Uint8Array} signature - Byte array of raw signature.
 * @param {JsonWebKey} publicJwk - public key for signing in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'.
 * @param {Object} algorithm - Object to specify algorithm parameters.
 * @param {Object} nodeCrypto - NodeCrypto object
 * @return {Promise<boolean>} - Result of verification.
 * @throws {Error} - Throws if NotPublicKeyForRSAVerify.
 */
exports.verifyRsa = function (msg, signature, publicJwk, hash, algorithm, nodeCrypto) { return __awaiter(void 0, void 0, void 0, function () {
    var keyObj, publicPem, verify, opt;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                keyObj = new js_crypto_key_utils_1.Key('jwk', publicJwk);
                if (keyObj.isPrivate)
                    throw new Error('NotPublicKeyForRSAVerify');
                return [4 /*yield*/, keyObj.export('pem', { outputPublic: true })];
            case 1:
                publicPem = _a.sent();
                verify = nodeCrypto.createVerify(params.hashes[hash].nodeName);
                verify.update(msg);
                opt = (algorithm.name === 'RSA-PSS') ? { saltLength: algorithm.saltLength, padding: nodeCrypto.constants.RSA_PKCS1_PSS_PADDING } : {};
                return [2 /*return*/, verify.verify(Object.assign({ key: publicPem }, opt), signature)];
        }
    });
}); };
/**
 * RSA Encryption via NodeCrypto.
 * @param {Uint8Array} msg - Byte array of message to be encrypted
 * @param {JsonWebKey} publicJwk - Public key in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'
 * @param {Uint8Array} label - RSA-OAEP label.
 * @param {Object} nodeCrypto - NodeCrypto object.
 * @return {Promise<Uint8Array>} - Encrypted message.
 * @throws {Error} - Throws if NotPublicKeyForRSAEncrypt.
 */
exports.encryptRsa = function (msg, publicJwk, hash, label, nodeCrypto) {
    if (hash === void 0) { hash = 'SHA-256'; }
    if (label === void 0) { label = new Uint8Array([]); }
    return __awaiter(void 0, void 0, void 0, function () {
        var keyObj, publicPem, encrypted, em;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    keyObj = new js_crypto_key_utils_1.Key('jwk', publicJwk);
                    if (keyObj.isPrivate)
                        throw new Error('NotPublicKeyForRSAEncrypt');
                    return [4 /*yield*/, keyObj.export('pem', { outputPublic: true })];
                case 1:
                    publicPem = _a.sent();
                    if (!(hash === 'SHA-1')) return [3 /*break*/, 2];
                    encrypted = nodeCrypto.publicEncrypt({ key: publicPem, padding: nodeCrypto.constants.RSA_PKCS1_OAEP_PADDING }, msg);
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, oaep.emeOaepEncode(msg, label, js_encoding_utils_1.default.encoder.decodeBase64Url((publicJwk.n)).length, hash)];
                case 3:
                    em = _a.sent();
                    encrypted = nodeCrypto.publicEncrypt({ key: publicPem, padding: nodeCrypto.constants.RSA_NO_PADDING }, em);
                    _a.label = 4;
                case 4: return [2 /*return*/, new Uint8Array(encrypted)];
            }
        });
    });
};
/**
 * RSA Decryption via NodeCrypto.
 * @param {Uint8Array} data - encrypted message byte array.
 * @param {JsonWebKey} privateJwk - Private key in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'
 * @param {Uint8Array} label - RSA-OAEP label.
 * @param {Object} nodeCrypto - NodeCrypto object.
 * @return {Promise<Uint8Array>} - Decrypted message.
 * @throws {Error} - Throws if NotPrivateKeyForRSADecrypt.
 */
exports.decryptRsa = function (data, privateJwk, hash, label, nodeCrypto) {
    if (hash === void 0) { hash = 'SHA-256'; }
    if (label === void 0) { label = new Uint8Array([]); }
    return __awaiter(void 0, void 0, void 0, function () {
        var keyObj, privatePem, decrypted, em;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    keyObj = new js_crypto_key_utils_1.Key('jwk', privateJwk);
                    if (!keyObj.isPrivate)
                        throw new Error('NotPrivateKeyForRSADecrypt');
                    return [4 /*yield*/, keyObj.export('pem')];
                case 1:
                    privatePem = _a.sent();
                    if (!(hash === 'SHA-1')) return [3 /*break*/, 2];
                    decrypted = nodeCrypto.privateDecrypt({ key: privatePem, padding: nodeCrypto.constants.RSA_PKCS1_OAEP_PADDING }, data);
                    return [3 /*break*/, 4];
                case 2:
                    em = nodeCrypto.privateDecrypt({ key: privatePem, padding: nodeCrypto.constants.RSA_NO_PADDING }, data);
                    return [4 /*yield*/, oaep.emeOaepDecode(new Uint8Array(em), label, js_encoding_utils_1.default.encoder.decodeBase64Url((privateJwk.n)).length, hash)];
                case 3:
                    decrypted = _a.sent();
                    _a.label = 4;
                case 4: return [2 /*return*/, new Uint8Array(decrypted)];
            }
        });
    });
};
//# sourceMappingURL=nodeapi.js.map