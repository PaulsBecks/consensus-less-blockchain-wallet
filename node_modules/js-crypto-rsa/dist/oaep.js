"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * oaep.js
 */
var params = __importStar(require("./params"));
var js_crypto_hash_1 = __importDefault(require("js-crypto-hash"));
var js_crypto_random_1 = __importDefault(require("js-crypto-random"));
/**
 * Check OAEP length
 * @param {String} mode - 'encrypt' or 'decrypt'
 * @param {Number} k - Octet length of modulus length, i.e., n.
 * @param {Uint8Array} label - OAEP label.
 * @param {String} hash - Name of hash function.
 * @param {Number} mLen - Octet length of message to be encrypted.
 * @param {Number} cLen - the length of ciphertext
 * @throws {Error} - Throws if LabelTooLong, MessageTooLong, DecryptionError or InvalidMode.
 */
exports.checkLength = function (mode, _a) {
    var k = _a.k, label = _a.label, hash = _a.hash, mLen = _a.mLen, cLen = _a.cLen;
    if (mode === 'encrypt') {
        if (label.length > (1 << params.hashes[hash].maxInput) - 1)
            throw new Error('LabelTooLong');
        if (mLen > k - 2 * params.hashes[hash].hashSize - 2)
            throw new Error('MessageTooLong');
    }
    else if (mode === 'decrypt') {
        if (label.length > (1 << params.hashes[hash].maxInput) - 1)
            throw new Error('DecryptionError');
        if (cLen !== k || k < 2 * params.hashes[hash].hashSize + 2)
            throw new Error('DecryptionError');
    }
    else
        throw new Error('InvalidMode');
};
/*
      a. If the label L is not provided, let L be the empty string. Let
         lHash = Hash(L), an octet string of length hLen (see the note
         below).

      b. Generate an octet string PS consisting of k - mLen - 2hLen - 2
         zero octets.  The length of PS may be zero.

      c. Concatenate lHash, PS, a single octet with hexadecimal value
         0x01, and the message M to form a data block DB of length k -
         hLen - 1 octets as

            DB = lHash || PS || 0x01 || M.

      d. Generate a random octet string seed of length hLen.

      e. Let dbMask = MGF(seed, k - hLen - 1).

      f. Let maskedDB = DB \xor dbMask.

      g. Let seedMask = MGF(maskedDB, hLen).

      h. Let maskedSeed = seed \xor seedMask.

      i. Concatenate a single octet with hexadecimal value 0x00,
         maskedSeed, and maskedDB to form an encoded message EM of
         length k octets as

            EM = 0x00 || maskedSeed || maskedDB.
 */
/**
 * OAEP Encoder
 * @param {Uint8Array} msg - Message.
 * @param {Uint8Array} label - Label.
 * @param {Number} k - Octet length of modulus length, i.e., n.
 * @param {String} hash - Name of hash function.
 * @return {Promise<Uint8Array>} - OAEP encoded message.
 */
exports.emeOaepEncode = function (msg, label, k, hash) {
    if (hash === void 0) { hash = 'SHA-256'; }
    return __awaiter(void 0, void 0, void 0, function () {
        var hashSize, ps, lHash, db, seed, dbMask, maskedDb, seedMask, maskedSeed, em;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    hashSize = params.hashes[hash].hashSize;
                    ps = new Uint8Array(k - msg.length - (2 * hashSize) - 2);
                    ps = ps.map(function () { return 0x00; });
                    return [4 /*yield*/, js_crypto_hash_1.default.compute(label, hash)];
                case 1:
                    lHash = _a.sent();
                    db = new Uint8Array(k - hashSize - 1);
                    db.set(lHash);
                    db.set(ps, hashSize);
                    db.set(new Uint8Array([0x01]), k - msg.length - hashSize - 2);
                    db.set(msg, k - msg.length - hashSize - 1);
                    return [4 /*yield*/, js_crypto_random_1.default.getRandomBytes(hashSize)];
                case 2:
                    seed = _a.sent();
                    return [4 /*yield*/, mgf1(seed, k - hashSize - 1, hash)];
                case 3:
                    dbMask = _a.sent();
                    maskedDb = db.map(function (elem, idx) { return 0xFF & (elem ^ dbMask[idx]); });
                    return [4 /*yield*/, mgf1(maskedDb, hashSize, hash)];
                case 4:
                    seedMask = _a.sent();
                    maskedSeed = seed.map(function (elem, idx) { return 0xFF & (elem ^ seedMask[idx]); });
                    em = new Uint8Array(k);
                    em.set(new Uint8Array([0x00]));
                    em.set(maskedSeed, 1);
                    em.set(maskedDb, hashSize + 1);
                    return [2 /*return*/, em];
            }
        });
    });
};
/*
      a. If the label L is not provided, let L be the empty string. Let
         lHash = Hash(L), an octet string of length hLen (see the note
         in Section 7.1.1).

      b. Separate the encoded message EM into a single octet Y, an octet
         string maskedSeed of length hLen, and an octet string maskedDB
         of length k - hLen - 1 as

            EM = Y || maskedSeed || maskedDB.

      c. Let seedMask = MGF(maskedDB, hLen).

      d. Let seed = maskedSeed \xor seedMask.

      e. Let dbMask = MGF(seed, k - hLen - 1).

      f. Let DB = maskedDB \xor dbMask.

      g. Separate DB into an octet string lHash' of length hLen, a
         (possibly empty) padding string PS consisting of octets with
         hexadecimal value 0x00, and a message M as

            DB = lHash' || PS || 0x01 || M.

         If there is no octet with hexadecimal value 0x01 to separate PS
         from M, if lHash does not equal lHash', or if Y is nonzero,
         output "decryption error" and stop.  (See the note below.)
 */
/**
 * OAEP Decoder
 * @param {Uint8Array} em - OAEP encoded message.
 * @param {Uint8Array} label - Label.
 * @param {Number} k - Octet length of modulus length, i.e., n.
 * @param {String} hash - Name of hash function.
 * @return {Promise<Uint8Array>} - OAEP decoded message.
 * @throws {Error} - Throws if DecryptionError.
 */
exports.emeOaepDecode = function (em, label, k, hash) {
    if (hash === void 0) { hash = 'SHA-256'; }
    return __awaiter(void 0, void 0, void 0, function () {
        var hashSize, lHash, y, maskedSeed, maskedDb, seedMask, seed, dbMask, db, lHashPrime, offset, i, separator;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    hashSize = params.hashes[hash].hashSize;
                    return [4 /*yield*/, js_crypto_hash_1.default.compute(label, hash)];
                case 1:
                    lHash = _a.sent();
                    y = em[0];
                    if (y !== 0x00)
                        throw new Error('DecryptionError');
                    maskedSeed = em.slice(1, hashSize + 1);
                    maskedDb = em.slice(hashSize + 1, em.length);
                    return [4 /*yield*/, mgf1(maskedDb, hashSize, hash)];
                case 2:
                    seedMask = _a.sent();
                    seed = maskedSeed.map(function (elem, idx) { return 0xFF & (elem ^ seedMask[idx]); });
                    return [4 /*yield*/, mgf1(seed, k - hashSize - 1, hash)];
                case 3:
                    dbMask = _a.sent();
                    db = maskedDb.map(function (elem, idx) { return 0xFF & (elem ^ dbMask[idx]); });
                    lHashPrime = db.slice(0, hashSize);
                    if (lHashPrime.toString() !== lHash.toString())
                        throw new Error('DecryptionError');
                    offset = 0;
                    for (i = hashSize; i < db.length; i++) {
                        if (db[i] !== 0x00) {
                            offset = i;
                            break;
                        }
                    }
                    separator = db[offset];
                    if (separator !== 0x01)
                        throw new Error('DecryptionError');
                    return [2 /*return*/, db.slice(offset + 1, db.length)];
            }
        });
    });
};
/**
 * Mask generation function 1 (MGF1)
 * @param {Uint8Array} seed - Seed.
 * @param {Number} len - Length of mask.
 * @param {String} [hash='SHA-256'] - Name of hash algorithm.
 * @return {Promise<Uint8Array>}: Generated mask.
 */
var mgf1 = function (seed, len, hash) {
    if (hash === void 0) { hash = 'SHA-256'; }
    return __awaiter(void 0, void 0, void 0, function () {
        var hashSize, blockLen, t, i, c, x, y;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    hashSize = params.hashes[hash].hashSize;
                    blockLen = Math.ceil(len / hashSize);
                    t = new Uint8Array(blockLen * hashSize);
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < blockLen)) return [3 /*break*/, 4];
                    c = i2osp(i, 4);
                    x = new Uint8Array(seed.length + 4);
                    x.set(seed);
                    x.set(c, seed.length);
                    return [4 /*yield*/, js_crypto_hash_1.default.compute(x, hash)];
                case 2:
                    y = _a.sent();
                    t.set(y, i * hashSize);
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, t.slice(0, len)];
            }
        });
    });
};
/**
 * I2OSP function
 * @param {Number} x - Number to be encoded to byte array in network byte order.
 * @param {Number} len - Length of byte array
 * @return {Uint8Array} - Encoded number.
 */
var i2osp = function (x, len) {
    var r = new Uint8Array(len);
    // @ts-ignore
    r.forEach(function (elem, idx) {
        var y = 0xFF & (x >> (idx * 8));
        r[len - idx - 1] = y;
    });
    return r;
};
//# sourceMappingURL=oaep.js.map