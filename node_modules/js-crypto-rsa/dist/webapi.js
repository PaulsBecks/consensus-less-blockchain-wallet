"use strict";
/**
 * webapi.js
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var js_encoding_utils_1 = __importDefault(require("js-encoding-utils"));
var js_crypto_env_1 = require("js-crypto-env");
/**
 * Generate RSA public/private key pair.
 * @param {Number} modulusLength - Modulus length in bits, i.e., n.
 * @param {Uint8Array} publicExponent - Public exponent, i.e, e.
 * @param {Object} webCrypto - WebCryptoSubtle object, i.e., window.crypto.subtle or window.msCrypto.subtle.
 * @return {Promise<{publicKey: JsonWebKey, privateKey: JsonWebKey}>}
 */
exports.generateKey = function (modulusLength, publicExponent, webCrypto) { return __awaiter(void 0, void 0, void 0, function () {
    var publicKey, privateKey, alg, msCrypto, keys, keys;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                alg = { name: 'RSA-OAEP', modulusLength: modulusLength, publicExponent: publicExponent, hash: { name: 'SHA-256' } };
                msCrypto = js_crypto_env_1.getMsCrypto();
                if (!(typeof msCrypto === 'undefined')) return [3 /*break*/, 4];
                return [4 /*yield*/, webCrypto.generateKey(alg, true, ['encrypt', 'decrypt'])];
            case 1:
                keys = _a.sent();
                return [4 /*yield*/, webCrypto.exportKey('jwk', keys.publicKey)];
            case 2:
                publicKey = _a.sent(); // export keys in jwk format
                return [4 /*yield*/, webCrypto.exportKey('jwk', keys.privateKey)];
            case 3:
                privateKey = _a.sent(); // export keys in jwk format
                return [3 /*break*/, 8];
            case 4: return [4 /*yield*/, msGenerateKey(alg, true, ['encrypt', 'decrypt'], webCrypto)];
            case 5:
                keys = _a.sent();
                return [4 /*yield*/, msExportKey('jwk', keys.publicKey, webCrypto)];
            case 6:
                publicKey = (_a.sent());
                return [4 /*yield*/, msExportKey('jwk', keys.privateKey, webCrypto)];
            case 7:
                privateKey = (_a.sent());
                _a.label = 8;
            case 8:
                // delete optional entries to export as general rsa sign/encrypt key
                delete publicKey.key_ops;
                delete publicKey.alg;
                delete publicKey.ext;
                delete privateKey.key_ops;
                delete privateKey.alg;
                delete privateKey.ext;
                return [2 /*return*/, { publicKey: publicKey, privateKey: privateKey }];
        }
    });
}); };
/**
 * RSA signing via RSA-PSS or RSASSA-PKCS1-v1_5 in WebAPI.
 * @param {Uint8Array} msg - Byte array of message to be signed.
 * @param {JsonWebKey} privateJwk - Private key for signing in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'.
 * @param {RSASignAlgorithm} algorithm - Object to specify algorithm parameters.
 * @param {Object} webCrypto - WebCryptoSubtle object
 * @return {Promise<Uint8Array>} - Byte array of raw signature.
 * @throws {Error} - if RSA-PSS in IE.
 */
function signRsa(msg, privateJwk, hash, algorithm, webCrypto) {
    return __awaiter(this, void 0, void 0, function () {
        var algo, msCrypto, signature, key, key;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    algo = { name: algorithm.name, hash: { name: hash }, saltLength: algorithm.saltLength };
                    msCrypto = js_crypto_env_1.getMsCrypto();
                    if (!(typeof msCrypto === 'undefined')) return [3 /*break*/, 3];
                    return [4 /*yield*/, webCrypto.importKey('jwk', privateJwk, algo, false, ['sign'])];
                case 1:
                    key = _a.sent();
                    return [4 /*yield*/, webCrypto.sign(algo, key, msg)];
                case 2:
                    signature = _a.sent();
                    return [3 /*break*/, 6];
                case 3:
                    if (algorithm.name === 'RSA-PSS')
                        throw new Error('IE does not support RSA-PSS. Use RSASSA-PKCS1-v1_5.');
                    return [4 /*yield*/, msImportKey('jwk', privateJwk, algo, false, ['sign'], webCrypto)];
                case 4:
                    key = _a.sent();
                    return [4 /*yield*/, msSign(algo, key, msg, webCrypto)];
                case 5:
                    signature = _a.sent();
                    _a.label = 6;
                case 6: return [2 /*return*/, new Uint8Array(signature)];
            }
        });
    });
}
exports.signRsa = signRsa;
/**
 * Verification of RSA signature via RSA-PSS or RSASSA-PKCS1-v1_5 in WebAPI.
 * @param {Uint8Array} msg - Byte array of message signed.
 * @param {Uint8Array} signature - Byte array of raw signature.
 * @param {JsonWebKey} publicJwk - public key for signing in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'.
 * @param {RSASignAlgorithm} algorithm - Object to specify algorithm parameters.
 * @param {Object} webCrypto - WebCryptoSubtle object
 * @return {Promise<boolean>} - Result of verification.
 * @throws {Error} - if RSA-PSS in IE.
 */
exports.verifyRsa = function (msg, signature, publicJwk, hash, algorithm, webCrypto) { return __awaiter(void 0, void 0, void 0, function () {
    var algo, msCrypto, valid, key, key;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                algo = { name: algorithm.name, hash: { name: hash }, saltLength: algorithm.saltLength };
                msCrypto = js_crypto_env_1.getMsCrypto();
                if (!(typeof msCrypto === 'undefined')) return [3 /*break*/, 3];
                return [4 /*yield*/, webCrypto.importKey('jwk', publicJwk, algo, false, ['verify'])];
            case 1:
                key = _a.sent();
                return [4 /*yield*/, webCrypto.verify(algo, key, signature, msg)];
            case 2:
                valid = _a.sent();
                return [3 /*break*/, 6];
            case 3:
                if (algorithm.name === 'RSA-PSS')
                    throw new Error('IE does not support RSA-PSS. Use RSASSA-PKCS1-v1_5.');
                return [4 /*yield*/, msImportKey('jwk', publicJwk, algo, false, ['verify'], webCrypto)];
            case 4:
                key = _a.sent();
                return [4 /*yield*/, msVerify(algo, key, signature, msg, webCrypto)];
            case 5:
                valid = _a.sent();
                _a.label = 6;
            case 6: return [2 /*return*/, valid];
        }
    });
}); };
/**
 * RSA Encryption via WebAPI.
 * @param {Uint8Array} msg - Byte array of message to be encrypted
 * @param {JsonWebKey} publicJwk - Public key in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'
 * @param {Uint8Array} label - RSA-OAEP label.
 * @param {Object} webCrypto - WebCryptoSubtle object
 * @return {Promise<Uint8Array>} - Encrypted message.
 * @throws {Error} - if RSA-OAEP label is specified in IE.
 */
exports.encryptRsa = function (msg, publicJwk, hash, label, webCrypto) { return __awaiter(void 0, void 0, void 0, function () {
    var algo, msCrypto, encrypted, key, key;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                algo = { name: 'RSA-OAEP', hash: { name: hash }, label: label };
                msCrypto = js_crypto_env_1.getMsCrypto();
                if (!(typeof msCrypto === 'undefined')) return [3 /*break*/, 3];
                return [4 /*yield*/, webCrypto.importKey('jwk', publicJwk, algo, false, ['encrypt'])];
            case 1:
                key = _a.sent();
                return [4 /*yield*/, webCrypto.encrypt(algo, key, msg)];
            case 2:
                encrypted = _a.sent();
                return [3 /*break*/, 6];
            case 3:
                if (label.toString() !== (new Uint8Array()).toString())
                    throw new Error('IE does not support RSA-OAEP label.');
                return [4 /*yield*/, msImportKey('jwk', publicJwk, algo, false, ['encrypt'], webCrypto)];
            case 4:
                key = _a.sent();
                return [4 /*yield*/, msEncrypt(algo, key, msg, webCrypto)];
            case 5:
                encrypted = _a.sent();
                _a.label = 6;
            case 6: return [2 /*return*/, new Uint8Array(encrypted)];
        }
    });
}); };
/**
 * RSA Decryption via WebAPI.
 * @param {Uint8Array} msg - encrypted message byte array.
 * @param {JsonWebKey} privateJwk - Private key in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'
 * @param {Uint8Array} label - RSA-OAEP label.
 * @param {Object} webCrypto - WebCryptoSubtle object.
 * @return {Promise<Uint8Array>} - Decrypted message.
 * @throws {Error} - if RSA-OAEP label is specified in IE.
 */
exports.decryptRsa = function (msg, privateJwk, hash, label, webCrypto) { return __awaiter(void 0, void 0, void 0, function () {
    var algo, msCrypto, decrypted, key, key;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                algo = { name: 'RSA-OAEP', hash: { name: hash }, label: label };
                msCrypto = js_crypto_env_1.getMsCrypto();
                if (!(typeof msCrypto === 'undefined')) return [3 /*break*/, 3];
                return [4 /*yield*/, webCrypto.importKey('jwk', privateJwk, algo, false, ['decrypt'])];
            case 1:
                key = _a.sent();
                return [4 /*yield*/, webCrypto.decrypt(algo, key, msg)];
            case 2:
                decrypted = _a.sent();
                return [3 /*break*/, 6];
            case 3:
                if (label.toString() !== (new Uint8Array()).toString())
                    throw new Error('IE does not support RSA-OAEP label.');
                return [4 /*yield*/, msImportKey('jwk', privateJwk, algo, false, ['decrypt'], webCrypto)];
            case 4:
                key = _a.sent();
                return [4 /*yield*/, msDecrypt(algo, key, msg, webCrypto)];
            case 5:
                decrypted = _a.sent();
                _a.label = 6;
            case 6: return [2 /*return*/, new Uint8Array(decrypted)];
        }
    });
}); };
/////////////////////////////////////////////
// function definitions for damn IE
var msGenerateKey = function (alg, ext, use, webCrypto) { return new Promise(function (resolve, reject) {
    var op = webCrypto.generateKey(alg, ext, use);
    op.oncomplete = function (evt) { resolve(evt.target.result); };
    op.onerror = function () { reject('KeyGenerationFailed'); };
}); };
var msImportKey = function (type, key, alg, ext, use, webCrypto) { return new Promise(function (resolve, reject) {
    var inputKey = key;
    if (type === 'jwk') {
        inputKey = JSON.stringify(key);
        inputKey = js_encoding_utils_1.default.encoder.stringToArrayBuffer(inputKey);
    }
    var op = webCrypto.importKey(type, inputKey, alg, ext, use);
    op.oncomplete = function (evt) { resolve(evt.target.result); };
    op.onerror = function () { reject('KeyImportingFailed'); };
}); };
var msExportKey = function (type, key, webCrypto) { return new Promise(function (resolve, reject) {
    var op = webCrypto.exportKey(type, key);
    op.oncomplete = function (evt) {
        var output = evt.target.result;
        if (type === 'jwk') {
            output = js_encoding_utils_1.default.encoder.arrayBufferToString(new Uint8Array(output));
            output = JSON.parse(output);
        }
        resolve(output);
    };
    op.onerror = function () { reject('KeyExportingFailed'); };
}); };
var msEncrypt = function (alg, key, msg, webCrypto) { return new Promise(function (resolve, reject) {
    delete alg.label; // if exists, the MSCrypto doesn't work...wtf
    var op = webCrypto.encrypt(alg, key, msg);
    op.oncomplete = function (evt) { resolve(evt.target.result); };
    op.onerror = function () { reject('EncryptionFailure'); };
}); };
var msDecrypt = function (alg, key, data, webCrypto) { return new Promise(function (resolve, reject) {
    delete alg.label; // if exists, the MSCrypto doesn't work...wtf
    var op = webCrypto.decrypt(alg, key, data);
    op.oncomplete = function (evt) { resolve(evt.target.result); };
    op.onerror = function () { reject('DecryptionFailure'); };
}); };
var msSign = function (alg, key, msg, webCrypto) { return new Promise(function (resolve, reject) {
    var op = webCrypto.sign(alg, key, msg);
    op.oncomplete = function (evt) { resolve(evt.target.result); };
    op.onerror = function () { reject('SigningFailed'); };
}); };
var msVerify = function (alg, key, sig, msg, webCrypto) { return new Promise(function (resolve, reject) {
    var op = webCrypto.verify(alg, key, sig, msg);
    op.oncomplete = function (evt) { resolve(evt.target.result); };
    op.onerror = function () { reject('VerificationFailed'); };
}); };
//# sourceMappingURL=webapi.js.map