"use strict";
/**
 * rsa.js
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var util = __importStar(require("js-crypto-env"));
var js_encoding_utils_1 = __importDefault(require("js-encoding-utils"));
var webapi = __importStar(require("./webapi"));
var nodeapi = __importStar(require("./nodeapi"));
var params = __importStar(require("./params"));
var oaep_1 = require("./oaep");
var pss_1 = require("./pss");
/**
 * Generate RSA public/private key pair.
 * @param {Number} [modulusLength=2048] - Modulus length in bits, i.e., n.
 * @param {Uint8Array} [publicExponent=new Uint8Array([0x01, 0x00, 0x01])] - Public exponent, i.e, e.
 * @return {Promise<{publicKey: JsonWebKey, privateKey: JsonWebKey}>}
 * @throws {Error} - Throws if UnsupportedEnvironment.
 */
exports.generateKey = function (modulusLength, publicExponent) {
    if (modulusLength === void 0) { modulusLength = 2048; }
    if (publicExponent === void 0) { publicExponent = new Uint8Array([0x01, 0x00, 0x01]); }
    return __awaiter(void 0, void 0, void 0, function () {
        var env, pure, keyPair, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    env = util.getCrypto();
                    pure = false;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 7, , 8]);
                    if (!(env.name === 'webCrypto' && typeof env.crypto.generateKey === 'function' && typeof env.crypto.exportKey === 'function')) return [3 /*break*/, 3];
                    return [4 /*yield*/, webapi.generateKey(modulusLength, publicExponent, env.crypto)];
                case 2:
                    keyPair = _a.sent();
                    return [3 /*break*/, 6];
                case 3:
                    if (!(env.name === 'nodeCrypto')) return [3 /*break*/, 5];
                    return [4 /*yield*/, nodeapi.generateKey(modulusLength, publicExponent, env.crypto)];
                case 4:
                    keyPair = _a.sent();
                    return [3 /*break*/, 6];
                case 5:
                    pure = true;
                    throw new Error('UnsupportedPureJsEnvironment');
                case 6: return [2 /*return*/, keyPair];
                case 7:
                    e_1 = _a.sent();
                    if (pure)
                        throw new Error(e_1.message);
                    else
                        throw new Error("UnsupportedEnvironment: " + e_1.message);
                    return [3 /*break*/, 8];
                case 8: return [2 /*return*/];
            }
        });
    });
};
/**
 * RSA signing via RSA-PSS or RSASSA-PKCS1-v1_5.
 * @param {Uint8Array} msg - Byte array of message to be signed.
 * @param {JsonWebKey} privateJwk - Private key for signing in JWK format.
 * @param {String} [hash='SHA-256'] - Name of hash algorithm like 'SHA-256'.
 * @param {RSASignAlgorithm} [algorithm={name: 'RSA-PSS', saltLength: params.hashes[hash].hashSize}] - Object to specify algorithm parameters.
 * @return {Promise<Uint8Array>} - Byte array of raw signature.
 * @throws {Error} - Throws if UnsupportedEnvironment.
 */
exports.sign = function (msg, privateJwk, hash, algorithm) {
    if (hash === void 0) { hash = 'SHA-256'; }
    if (algorithm === void 0) { algorithm = { name: 'RSA-PSS', saltLength: params.hashes[hash].hashSize }; }
    return __awaiter(void 0, void 0, void 0, function () {
        var env, pure, signature, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // assertion
                    if (privateJwk.kty !== 'RSA')
                        throw new Error('InvalidJwkRsaKey');
                    if (algorithm.name === 'RSA-PSS') {
                        pss_1.checkLength('sign', { k: js_encoding_utils_1.default.encoder.decodeBase64Url((privateJwk.n)).length, hash: hash, saltLength: algorithm.saltLength });
                    }
                    env = util.getCrypto();
                    pure = false;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 7, , 8]);
                    if (!(env.name === 'webCrypto' && typeof env.crypto.sign === 'function' && typeof env.crypto.importKey === 'function')) return [3 /*break*/, 3];
                    return [4 /*yield*/, webapi.signRsa(msg, privateJwk, hash, algorithm, env.crypto)];
                case 2:
                    signature = _a.sent();
                    return [3 /*break*/, 6];
                case 3:
                    if (!(env.name === 'nodeCrypto')) return [3 /*break*/, 5];
                    return [4 /*yield*/, nodeapi.signRsa(msg, privateJwk, hash, algorithm, env.crypto)];
                case 4:
                    signature = _a.sent();
                    return [3 /*break*/, 6];
                case 5:
                    pure = true;
                    throw new Error('UnsupportedPureJsEnvironment');
                case 6: return [2 /*return*/, signature];
                case 7:
                    e_2 = _a.sent();
                    if (pure)
                        throw new Error(e_2.message);
                    else
                        throw new Error("UnsupportedEnvironment: " + e_2.message);
                    return [3 /*break*/, 8];
                case 8: return [2 /*return*/];
            }
        });
    });
};
/**
 * Verification of RSA signature via RSA-PSS or RSASSA-PKCS1-v1_5.
 * @param {Uint8Array} msg - Byte array of message signed.
 * @param {Uint8Array} signature - Byte array of raw signature.
 * @param {JsonWebKey} publicJwk - public key for signing in JWK format.
 * @param {String} [hash='SHA-256'] - Name of hash algorithm like 'SHA-256'.
 * @param {RSASignAlgorithm} [algorithm={name: 'RSA-PSS', saltLength: params.hashes[hash].hashSize}] - Object to specify algorithm parameters.
 * @return {Promise<boolean>} - Result of verification.
 * @throws {Error} - Throws if InvalidSignatureFormat, or UnsupportedEnvironment.
 */
exports.verify = function (msg, signature, publicJwk, hash, algorithm) {
    if (hash === void 0) { hash = 'SHA-256'; }
    if (algorithm === void 0) { algorithm = { name: 'RSA-PSS', saltLength: params.hashes[hash].hashSize }; }
    return __awaiter(void 0, void 0, void 0, function () {
        var env, pure, valid, e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // assertion
                    if (publicJwk.kty !== 'RSA')
                        throw new Error('InvalidJwkRsaKey');
                    if (algorithm.name === 'RSA-PSS') {
                        pss_1.checkLength('verify', { k: js_encoding_utils_1.default.encoder.decodeBase64Url((publicJwk.n)).length, hash: hash, saltLength: (algorithm.saltLength) });
                    }
                    env = util.getCrypto();
                    pure = false;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 7, , 8]);
                    if (!(env.name === 'webCrypto' && typeof env.crypto.verify === 'function' && typeof env.crypto.importKey === 'function')) return [3 /*break*/, 3];
                    return [4 /*yield*/, webapi.verifyRsa(msg, signature, publicJwk, hash, algorithm, env.crypto)];
                case 2:
                    valid = _a.sent();
                    return [3 /*break*/, 6];
                case 3:
                    if (!(env.name === 'nodeCrypto')) return [3 /*break*/, 5];
                    return [4 /*yield*/, nodeapi.verifyRsa(msg, signature, publicJwk, hash, algorithm, env.crypto)];
                case 4:
                    valid = _a.sent();
                    return [3 /*break*/, 6];
                case 5:
                    pure = true;
                    throw new Error('UnsupportedPureJsEnvironment');
                case 6: return [2 /*return*/, valid];
                case 7:
                    e_3 = _a.sent();
                    if (pure)
                        throw new Error(e_3.message);
                    else
                        throw new Error("UnsupportedEnvironment: " + e_3.message);
                    return [3 /*break*/, 8];
                case 8: return [2 /*return*/];
            }
        });
    });
};
/**
 * RSA-OAEP Encryption
 * @param {Uint8Array} msg - Byte array of message to be encrypted.
 * @param {JsonWebKey} publicJwk - Public/Private key in JWK format.
 * @param {String} [hash='SHA-256'] - Name of hash algorithm like 'SHA-256'
 * @param {Uint8Array} [label=new Uint8Array([])] - RSA-OAEP label.
 * @return {Promise<Uint8Array>} - Encrypted message.
 * @throws {Error} - Throws if UnsupportedEnvironment.
 */
exports.encrypt = function (msg, publicJwk, hash, label) {
    if (hash === void 0) { hash = 'SHA-256'; }
    if (label === void 0) { label = new Uint8Array([]); }
    return __awaiter(void 0, void 0, void 0, function () {
        var env, pure, encrypted, e_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // assertion
                    if (publicJwk.kty !== 'RSA')
                        throw new Error('InvalidJwkRsaKey');
                    oaep_1.checkLength('encrypt', { k: js_encoding_utils_1.default.encoder.decodeBase64Url((publicJwk.n)).length, label: label, hash: hash, mLen: msg.length, cLen: 0 });
                    env = util.getCrypto();
                    pure = false;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 7, , 8]);
                    if (!(env.name === 'webCrypto' && typeof env.crypto.encrypt === 'function' && typeof env.crypto.importKey === 'function')) return [3 /*break*/, 3];
                    return [4 /*yield*/, webapi.encryptRsa(msg, publicJwk, hash, label, env.crypto)];
                case 2:
                    encrypted = _a.sent();
                    return [3 /*break*/, 6];
                case 3:
                    if (!(env.name === 'nodeCrypto')) return [3 /*break*/, 5];
                    return [4 /*yield*/, nodeapi.encryptRsa(msg, publicJwk, hash, label, env.crypto)];
                case 4:
                    encrypted = _a.sent();
                    return [3 /*break*/, 6];
                case 5:
                    pure = true;
                    throw new Error('UnsupportedPureJsEnvironment');
                case 6: return [2 /*return*/, encrypted];
                case 7:
                    e_4 = _a.sent();
                    if (pure)
                        throw new Error(e_4.message);
                    else
                        throw new Error("UnsupportedEnvironment: " + e_4.message);
                    return [3 /*break*/, 8];
                case 8: return [2 /*return*/];
            }
        });
    });
};
/**
 * RSA-OAEP Decryption.
 * @param {Uint8Array} data - Byte array of encrypted message to be decrypted.
 * @param {JsonWebKey} privateJwk - Private key in JWK format.
 * @param {String} [hash='SHA-256'] - Name of hash algorithm like 'SHA-256'
 * @param {Uint8Array} [label=new Uint8Array([])] - RSA-OAEP label.
 * @return {Promise<Uint8Array>} - Decrypted message.
 * @throws {Error} - Throws if UnsupportedEnvironment.
 */
exports.decrypt = function (data, privateJwk, hash, label) {
    if (hash === void 0) { hash = 'SHA-256'; }
    if (label === void 0) { label = new Uint8Array([]); }
    return __awaiter(void 0, void 0, void 0, function () {
        var env, pure, decrypted, e_5;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // assertion
                    if (privateJwk.kty !== 'RSA')
                        throw new Error('InvalidJwkRsaKey');
                    oaep_1.checkLength('decrypt', { k: js_encoding_utils_1.default.encoder.decodeBase64Url((privateJwk.n)).length, label: label, hash: hash, mLen: 0, cLen: data.length });
                    env = util.getCrypto();
                    pure = false;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 7, , 8]);
                    if (!(env.name === 'webCrypto' && typeof env.crypto.decrypt === 'function' && typeof env.crypto.importKey === 'function')) return [3 /*break*/, 3];
                    return [4 /*yield*/, webapi.decryptRsa(data, privateJwk, hash, label, env.crypto)];
                case 2:
                    decrypted = _a.sent();
                    return [3 /*break*/, 6];
                case 3:
                    if (!(env.name === 'nodeCrypto')) return [3 /*break*/, 5];
                    return [4 /*yield*/, nodeapi.decryptRsa(data, privateJwk, hash, label, env.crypto)];
                case 4:
                    decrypted = _a.sent();
                    return [3 /*break*/, 6];
                case 5:
                    pure = true;
                    throw new Error('UnsupportedPureJsEnvironment');
                case 6: return [2 /*return*/, decrypted];
                case 7:
                    e_5 = _a.sent();
                    if (pure)
                        throw new Error(e_5.message);
                    else
                        throw new Error("UnsupportedEnvironment: " + e_5.message);
                    return [3 /*break*/, 8];
                case 8: return [2 /*return*/];
            }
        });
    });
};
//# sourceMappingURL=rsa.js.map